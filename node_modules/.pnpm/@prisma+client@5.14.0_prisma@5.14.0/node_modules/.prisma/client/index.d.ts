
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model cases_by_year
 * 
 */
export type cases_by_year = $Result.DefaultSelection<Prisma.$cases_by_yearPayload>
/**
 * Model cases_citations
 * 
 */
export type cases_citations = $Result.DefaultSelection<Prisma.$cases_citationsPayload>
/**
 * Model ny_appeals_court_cases
 * 
 */
export type ny_appeals_court_cases = $Result.DefaultSelection<Prisma.$ny_appeals_court_casesPayload>
/**
 * Model supreme_court_cases
 * 
 */
export type supreme_court_cases = $Result.DefaultSelection<Prisma.$supreme_court_casesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cases_by_years
 * const cases_by_years = await prisma.cases_by_year.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cases_by_years
   * const cases_by_years = await prisma.cases_by_year.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cases_by_year`: Exposes CRUD operations for the **cases_by_year** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cases_by_years
    * const cases_by_years = await prisma.cases_by_year.findMany()
    * ```
    */
  get cases_by_year(): Prisma.cases_by_yearDelegate<ExtArgs>;

  /**
   * `prisma.cases_citations`: Exposes CRUD operations for the **cases_citations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cases_citations
    * const cases_citations = await prisma.cases_citations.findMany()
    * ```
    */
  get cases_citations(): Prisma.cases_citationsDelegate<ExtArgs>;

  /**
   * `prisma.ny_appeals_court_cases`: Exposes CRUD operations for the **ny_appeals_court_cases** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ny_appeals_court_cases
    * const ny_appeals_court_cases = await prisma.ny_appeals_court_cases.findMany()
    * ```
    */
  get ny_appeals_court_cases(): Prisma.ny_appeals_court_casesDelegate<ExtArgs>;

  /**
   * `prisma.supreme_court_cases`: Exposes CRUD operations for the **supreme_court_cases** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Supreme_court_cases
    * const supreme_court_cases = await prisma.supreme_court_cases.findMany()
    * ```
    */
  get supreme_court_cases(): Prisma.supreme_court_casesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    cases_by_year: 'cases_by_year',
    cases_citations: 'cases_citations',
    ny_appeals_court_cases: 'ny_appeals_court_cases',
    supreme_court_cases: 'supreme_court_cases'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'cases_by_year' | 'cases_citations' | 'ny_appeals_court_cases' | 'supreme_court_cases'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      cases_by_year: {
        payload: Prisma.$cases_by_yearPayload<ExtArgs>
        fields: Prisma.cases_by_yearFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cases_by_yearFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_by_yearPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cases_by_yearFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_by_yearPayload>
          }
          findFirst: {
            args: Prisma.cases_by_yearFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_by_yearPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cases_by_yearFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_by_yearPayload>
          }
          findMany: {
            args: Prisma.cases_by_yearFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_by_yearPayload>[]
          }
          create: {
            args: Prisma.cases_by_yearCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_by_yearPayload>
          }
          createMany: {
            args: Prisma.cases_by_yearCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.cases_by_yearCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_by_yearPayload>[]
          }
          delete: {
            args: Prisma.cases_by_yearDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_by_yearPayload>
          }
          update: {
            args: Prisma.cases_by_yearUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_by_yearPayload>
          }
          deleteMany: {
            args: Prisma.cases_by_yearDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.cases_by_yearUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.cases_by_yearUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_by_yearPayload>
          }
          aggregate: {
            args: Prisma.Cases_by_yearAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCases_by_year>
          }
          groupBy: {
            args: Prisma.cases_by_yearGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Cases_by_yearGroupByOutputType>[]
          }
          count: {
            args: Prisma.cases_by_yearCountArgs<ExtArgs>,
            result: $Utils.Optional<Cases_by_yearCountAggregateOutputType> | number
          }
        }
      }
      cases_citations: {
        payload: Prisma.$cases_citationsPayload<ExtArgs>
        fields: Prisma.cases_citationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cases_citationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_citationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cases_citationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_citationsPayload>
          }
          findFirst: {
            args: Prisma.cases_citationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_citationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cases_citationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_citationsPayload>
          }
          findMany: {
            args: Prisma.cases_citationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_citationsPayload>[]
          }
          create: {
            args: Prisma.cases_citationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_citationsPayload>
          }
          createMany: {
            args: Prisma.cases_citationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.cases_citationsCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_citationsPayload>[]
          }
          delete: {
            args: Prisma.cases_citationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_citationsPayload>
          }
          update: {
            args: Prisma.cases_citationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_citationsPayload>
          }
          deleteMany: {
            args: Prisma.cases_citationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.cases_citationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.cases_citationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cases_citationsPayload>
          }
          aggregate: {
            args: Prisma.Cases_citationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCases_citations>
          }
          groupBy: {
            args: Prisma.cases_citationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Cases_citationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.cases_citationsCountArgs<ExtArgs>,
            result: $Utils.Optional<Cases_citationsCountAggregateOutputType> | number
          }
        }
      }
      ny_appeals_court_cases: {
        payload: Prisma.$ny_appeals_court_casesPayload<ExtArgs>
        fields: Prisma.ny_appeals_court_casesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ny_appeals_court_casesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ny_appeals_court_casesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ny_appeals_court_casesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ny_appeals_court_casesPayload>
          }
          findFirst: {
            args: Prisma.ny_appeals_court_casesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ny_appeals_court_casesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ny_appeals_court_casesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ny_appeals_court_casesPayload>
          }
          findMany: {
            args: Prisma.ny_appeals_court_casesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ny_appeals_court_casesPayload>[]
          }
          create: {
            args: Prisma.ny_appeals_court_casesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ny_appeals_court_casesPayload>
          }
          createMany: {
            args: Prisma.ny_appeals_court_casesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ny_appeals_court_casesCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ny_appeals_court_casesPayload>[]
          }
          delete: {
            args: Prisma.ny_appeals_court_casesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ny_appeals_court_casesPayload>
          }
          update: {
            args: Prisma.ny_appeals_court_casesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ny_appeals_court_casesPayload>
          }
          deleteMany: {
            args: Prisma.ny_appeals_court_casesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ny_appeals_court_casesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ny_appeals_court_casesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ny_appeals_court_casesPayload>
          }
          aggregate: {
            args: Prisma.Ny_appeals_court_casesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNy_appeals_court_cases>
          }
          groupBy: {
            args: Prisma.ny_appeals_court_casesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Ny_appeals_court_casesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ny_appeals_court_casesCountArgs<ExtArgs>,
            result: $Utils.Optional<Ny_appeals_court_casesCountAggregateOutputType> | number
          }
        }
      }
      supreme_court_cases: {
        payload: Prisma.$supreme_court_casesPayload<ExtArgs>
        fields: Prisma.supreme_court_casesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.supreme_court_casesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$supreme_court_casesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.supreme_court_casesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$supreme_court_casesPayload>
          }
          findFirst: {
            args: Prisma.supreme_court_casesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$supreme_court_casesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.supreme_court_casesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$supreme_court_casesPayload>
          }
          findMany: {
            args: Prisma.supreme_court_casesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$supreme_court_casesPayload>[]
          }
          create: {
            args: Prisma.supreme_court_casesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$supreme_court_casesPayload>
          }
          createMany: {
            args: Prisma.supreme_court_casesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.supreme_court_casesCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$supreme_court_casesPayload>[]
          }
          delete: {
            args: Prisma.supreme_court_casesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$supreme_court_casesPayload>
          }
          update: {
            args: Prisma.supreme_court_casesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$supreme_court_casesPayload>
          }
          deleteMany: {
            args: Prisma.supreme_court_casesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.supreme_court_casesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.supreme_court_casesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$supreme_court_casesPayload>
          }
          aggregate: {
            args: Prisma.Supreme_court_casesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSupreme_court_cases>
          }
          groupBy: {
            args: Prisma.supreme_court_casesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Supreme_court_casesGroupByOutputType>[]
          }
          count: {
            args: Prisma.supreme_court_casesCountArgs<ExtArgs>,
            result: $Utils.Optional<Supreme_court_casesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Supreme_court_casesCountOutputType
   */

  export type Supreme_court_casesCountOutputType = {
    cases_citations: number
  }

  export type Supreme_court_casesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cases_citations?: boolean | Supreme_court_casesCountOutputTypeCountCases_citationsArgs
  }

  // Custom InputTypes
  /**
   * Supreme_court_casesCountOutputType without action
   */
  export type Supreme_court_casesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supreme_court_casesCountOutputType
     */
    select?: Supreme_court_casesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Supreme_court_casesCountOutputType without action
   */
  export type Supreme_court_casesCountOutputTypeCountCases_citationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cases_citationsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model cases_by_year
   */

  export type AggregateCases_by_year = {
    _count: Cases_by_yearCountAggregateOutputType | null
    _avg: Cases_by_yearAvgAggregateOutputType | null
    _sum: Cases_by_yearSumAggregateOutputType | null
    _min: Cases_by_yearMinAggregateOutputType | null
    _max: Cases_by_yearMaxAggregateOutputType | null
  }

  export type Cases_by_yearAvgAggregateOutputType = {
    year: number | null
  }

  export type Cases_by_yearSumAggregateOutputType = {
    year: number | null
  }

  export type Cases_by_yearMinAggregateOutputType = {
    oyez_id: string | null
    year: number | null
    docket_number: string | null
    uuid: string | null
  }

  export type Cases_by_yearMaxAggregateOutputType = {
    oyez_id: string | null
    year: number | null
    docket_number: string | null
    uuid: string | null
  }

  export type Cases_by_yearCountAggregateOutputType = {
    oyez_id: number
    year: number
    docket_number: number
    uuid: number
    _all: number
  }


  export type Cases_by_yearAvgAggregateInputType = {
    year?: true
  }

  export type Cases_by_yearSumAggregateInputType = {
    year?: true
  }

  export type Cases_by_yearMinAggregateInputType = {
    oyez_id?: true
    year?: true
    docket_number?: true
    uuid?: true
  }

  export type Cases_by_yearMaxAggregateInputType = {
    oyez_id?: true
    year?: true
    docket_number?: true
    uuid?: true
  }

  export type Cases_by_yearCountAggregateInputType = {
    oyez_id?: true
    year?: true
    docket_number?: true
    uuid?: true
    _all?: true
  }

  export type Cases_by_yearAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cases_by_year to aggregate.
     */
    where?: cases_by_yearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cases_by_years to fetch.
     */
    orderBy?: cases_by_yearOrderByWithRelationInput | cases_by_yearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cases_by_yearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cases_by_years from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cases_by_years.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cases_by_years
    **/
    _count?: true | Cases_by_yearCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cases_by_yearAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cases_by_yearSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cases_by_yearMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cases_by_yearMaxAggregateInputType
  }

  export type GetCases_by_yearAggregateType<T extends Cases_by_yearAggregateArgs> = {
        [P in keyof T & keyof AggregateCases_by_year]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCases_by_year[P]>
      : GetScalarType<T[P], AggregateCases_by_year[P]>
  }




  export type cases_by_yearGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cases_by_yearWhereInput
    orderBy?: cases_by_yearOrderByWithAggregationInput | cases_by_yearOrderByWithAggregationInput[]
    by: Cases_by_yearScalarFieldEnum[] | Cases_by_yearScalarFieldEnum
    having?: cases_by_yearScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cases_by_yearCountAggregateInputType | true
    _avg?: Cases_by_yearAvgAggregateInputType
    _sum?: Cases_by_yearSumAggregateInputType
    _min?: Cases_by_yearMinAggregateInputType
    _max?: Cases_by_yearMaxAggregateInputType
  }

  export type Cases_by_yearGroupByOutputType = {
    oyez_id: string
    year: number | null
    docket_number: string | null
    uuid: string | null
    _count: Cases_by_yearCountAggregateOutputType | null
    _avg: Cases_by_yearAvgAggregateOutputType | null
    _sum: Cases_by_yearSumAggregateOutputType | null
    _min: Cases_by_yearMinAggregateOutputType | null
    _max: Cases_by_yearMaxAggregateOutputType | null
  }

  type GetCases_by_yearGroupByPayload<T extends cases_by_yearGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cases_by_yearGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cases_by_yearGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cases_by_yearGroupByOutputType[P]>
            : GetScalarType<T[P], Cases_by_yearGroupByOutputType[P]>
        }
      >
    >


  export type cases_by_yearSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    oyez_id?: boolean
    year?: boolean
    docket_number?: boolean
    uuid?: boolean
  }, ExtArgs["result"]["cases_by_year"]>

  export type cases_by_yearSelectScalar = {
    oyez_id?: boolean
    year?: boolean
    docket_number?: boolean
    uuid?: boolean
  }



  export type $cases_by_yearPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cases_by_year"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      oyez_id: string
      year: number | null
      docket_number: string | null
      uuid: string | null
    }, ExtArgs["result"]["cases_by_year"]>
    composites: {}
  }


  type cases_by_yearGetPayload<S extends boolean | null | undefined | cases_by_yearDefaultArgs> = $Result.GetResult<Prisma.$cases_by_yearPayload, S>

  type cases_by_yearCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cases_by_yearFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Cases_by_yearCountAggregateInputType | true
    }

  export interface cases_by_yearDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cases_by_year'], meta: { name: 'cases_by_year' } }
    /**
     * Find zero or one Cases_by_year that matches the filter.
     * @param {cases_by_yearFindUniqueArgs} args - Arguments to find a Cases_by_year
     * @example
     * // Get one Cases_by_year
     * const cases_by_year = await prisma.cases_by_year.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cases_by_yearFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, cases_by_yearFindUniqueArgs<ExtArgs>>
    ): Prisma__cases_by_yearClient<$Result.GetResult<Prisma.$cases_by_yearPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cases_by_year that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {cases_by_yearFindUniqueOrThrowArgs} args - Arguments to find a Cases_by_year
     * @example
     * // Get one Cases_by_year
     * const cases_by_year = await prisma.cases_by_year.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cases_by_yearFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cases_by_yearFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__cases_by_yearClient<$Result.GetResult<Prisma.$cases_by_yearPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cases_by_year that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cases_by_yearFindFirstArgs} args - Arguments to find a Cases_by_year
     * @example
     * // Get one Cases_by_year
     * const cases_by_year = await prisma.cases_by_year.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cases_by_yearFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, cases_by_yearFindFirstArgs<ExtArgs>>
    ): Prisma__cases_by_yearClient<$Result.GetResult<Prisma.$cases_by_yearPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cases_by_year that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cases_by_yearFindFirstOrThrowArgs} args - Arguments to find a Cases_by_year
     * @example
     * // Get one Cases_by_year
     * const cases_by_year = await prisma.cases_by_year.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cases_by_yearFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cases_by_yearFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__cases_by_yearClient<$Result.GetResult<Prisma.$cases_by_yearPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cases_by_years that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cases_by_yearFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cases_by_years
     * const cases_by_years = await prisma.cases_by_year.findMany()
     * 
     * // Get first 10 Cases_by_years
     * const cases_by_years = await prisma.cases_by_year.findMany({ take: 10 })
     * 
     * // Only select the `oyez_id`
     * const cases_by_yearWithOyez_idOnly = await prisma.cases_by_year.findMany({ select: { oyez_id: true } })
     * 
    **/
    findMany<T extends cases_by_yearFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cases_by_yearFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cases_by_yearPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cases_by_year.
     * @param {cases_by_yearCreateArgs} args - Arguments to create a Cases_by_year.
     * @example
     * // Create one Cases_by_year
     * const Cases_by_year = await prisma.cases_by_year.create({
     *   data: {
     *     // ... data to create a Cases_by_year
     *   }
     * })
     * 
    **/
    create<T extends cases_by_yearCreateArgs<ExtArgs>>(
      args: SelectSubset<T, cases_by_yearCreateArgs<ExtArgs>>
    ): Prisma__cases_by_yearClient<$Result.GetResult<Prisma.$cases_by_yearPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cases_by_years.
     * @param {cases_by_yearCreateManyArgs} args - Arguments to create many Cases_by_years.
     * @example
     * // Create many Cases_by_years
     * const cases_by_year = await prisma.cases_by_year.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends cases_by_yearCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cases_by_yearCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cases_by_years and returns the data saved in the database.
     * @param {cases_by_yearCreateManyAndReturnArgs} args - Arguments to create many Cases_by_years.
     * @example
     * // Create many Cases_by_years
     * const cases_by_year = await prisma.cases_by_year.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cases_by_years and only return the `oyez_id`
     * const cases_by_yearWithOyez_idOnly = await prisma.cases_by_year.createManyAndReturn({ 
     *   select: { oyez_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends cases_by_yearCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, cases_by_yearCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cases_by_yearPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Cases_by_year.
     * @param {cases_by_yearDeleteArgs} args - Arguments to delete one Cases_by_year.
     * @example
     * // Delete one Cases_by_year
     * const Cases_by_year = await prisma.cases_by_year.delete({
     *   where: {
     *     // ... filter to delete one Cases_by_year
     *   }
     * })
     * 
    **/
    delete<T extends cases_by_yearDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, cases_by_yearDeleteArgs<ExtArgs>>
    ): Prisma__cases_by_yearClient<$Result.GetResult<Prisma.$cases_by_yearPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cases_by_year.
     * @param {cases_by_yearUpdateArgs} args - Arguments to update one Cases_by_year.
     * @example
     * // Update one Cases_by_year
     * const cases_by_year = await prisma.cases_by_year.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cases_by_yearUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, cases_by_yearUpdateArgs<ExtArgs>>
    ): Prisma__cases_by_yearClient<$Result.GetResult<Prisma.$cases_by_yearPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cases_by_years.
     * @param {cases_by_yearDeleteManyArgs} args - Arguments to filter Cases_by_years to delete.
     * @example
     * // Delete a few Cases_by_years
     * const { count } = await prisma.cases_by_year.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cases_by_yearDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cases_by_yearDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases_by_years.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cases_by_yearUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cases_by_years
     * const cases_by_year = await prisma.cases_by_year.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cases_by_yearUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, cases_by_yearUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cases_by_year.
     * @param {cases_by_yearUpsertArgs} args - Arguments to update or create a Cases_by_year.
     * @example
     * // Update or create a Cases_by_year
     * const cases_by_year = await prisma.cases_by_year.upsert({
     *   create: {
     *     // ... data to create a Cases_by_year
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cases_by_year we want to update
     *   }
     * })
    **/
    upsert<T extends cases_by_yearUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, cases_by_yearUpsertArgs<ExtArgs>>
    ): Prisma__cases_by_yearClient<$Result.GetResult<Prisma.$cases_by_yearPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cases_by_years.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cases_by_yearCountArgs} args - Arguments to filter Cases_by_years to count.
     * @example
     * // Count the number of Cases_by_years
     * const count = await prisma.cases_by_year.count({
     *   where: {
     *     // ... the filter for the Cases_by_years we want to count
     *   }
     * })
    **/
    count<T extends cases_by_yearCountArgs>(
      args?: Subset<T, cases_by_yearCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cases_by_yearCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cases_by_year.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cases_by_yearAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cases_by_yearAggregateArgs>(args: Subset<T, Cases_by_yearAggregateArgs>): Prisma.PrismaPromise<GetCases_by_yearAggregateType<T>>

    /**
     * Group by Cases_by_year.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cases_by_yearGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cases_by_yearGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cases_by_yearGroupByArgs['orderBy'] }
        : { orderBy?: cases_by_yearGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cases_by_yearGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCases_by_yearGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cases_by_year model
   */
  readonly fields: cases_by_yearFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cases_by_year.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cases_by_yearClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the cases_by_year model
   */ 
  interface cases_by_yearFieldRefs {
    readonly oyez_id: FieldRef<"cases_by_year", 'String'>
    readonly year: FieldRef<"cases_by_year", 'Int'>
    readonly docket_number: FieldRef<"cases_by_year", 'String'>
    readonly uuid: FieldRef<"cases_by_year", 'String'>
  }
    

  // Custom InputTypes
  /**
   * cases_by_year findUnique
   */
  export type cases_by_yearFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_by_year
     */
    select?: cases_by_yearSelect<ExtArgs> | null
    /**
     * Filter, which cases_by_year to fetch.
     */
    where: cases_by_yearWhereUniqueInput
  }

  /**
   * cases_by_year findUniqueOrThrow
   */
  export type cases_by_yearFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_by_year
     */
    select?: cases_by_yearSelect<ExtArgs> | null
    /**
     * Filter, which cases_by_year to fetch.
     */
    where: cases_by_yearWhereUniqueInput
  }

  /**
   * cases_by_year findFirst
   */
  export type cases_by_yearFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_by_year
     */
    select?: cases_by_yearSelect<ExtArgs> | null
    /**
     * Filter, which cases_by_year to fetch.
     */
    where?: cases_by_yearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cases_by_years to fetch.
     */
    orderBy?: cases_by_yearOrderByWithRelationInput | cases_by_yearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cases_by_years.
     */
    cursor?: cases_by_yearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cases_by_years from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cases_by_years.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cases_by_years.
     */
    distinct?: Cases_by_yearScalarFieldEnum | Cases_by_yearScalarFieldEnum[]
  }

  /**
   * cases_by_year findFirstOrThrow
   */
  export type cases_by_yearFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_by_year
     */
    select?: cases_by_yearSelect<ExtArgs> | null
    /**
     * Filter, which cases_by_year to fetch.
     */
    where?: cases_by_yearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cases_by_years to fetch.
     */
    orderBy?: cases_by_yearOrderByWithRelationInput | cases_by_yearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cases_by_years.
     */
    cursor?: cases_by_yearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cases_by_years from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cases_by_years.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cases_by_years.
     */
    distinct?: Cases_by_yearScalarFieldEnum | Cases_by_yearScalarFieldEnum[]
  }

  /**
   * cases_by_year findMany
   */
  export type cases_by_yearFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_by_year
     */
    select?: cases_by_yearSelect<ExtArgs> | null
    /**
     * Filter, which cases_by_years to fetch.
     */
    where?: cases_by_yearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cases_by_years to fetch.
     */
    orderBy?: cases_by_yearOrderByWithRelationInput | cases_by_yearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cases_by_years.
     */
    cursor?: cases_by_yearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cases_by_years from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cases_by_years.
     */
    skip?: number
    distinct?: Cases_by_yearScalarFieldEnum | Cases_by_yearScalarFieldEnum[]
  }

  /**
   * cases_by_year create
   */
  export type cases_by_yearCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_by_year
     */
    select?: cases_by_yearSelect<ExtArgs> | null
    /**
     * The data needed to create a cases_by_year.
     */
    data: XOR<cases_by_yearCreateInput, cases_by_yearUncheckedCreateInput>
  }

  /**
   * cases_by_year createMany
   */
  export type cases_by_yearCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cases_by_years.
     */
    data: cases_by_yearCreateManyInput | cases_by_yearCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cases_by_year createManyAndReturn
   */
  export type cases_by_yearCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_by_year
     */
    select?: cases_by_yearSelect<ExtArgs> | null
    /**
     * The data used to create many cases_by_years.
     */
    data: cases_by_yearCreateManyInput | cases_by_yearCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cases_by_year update
   */
  export type cases_by_yearUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_by_year
     */
    select?: cases_by_yearSelect<ExtArgs> | null
    /**
     * The data needed to update a cases_by_year.
     */
    data: XOR<cases_by_yearUpdateInput, cases_by_yearUncheckedUpdateInput>
    /**
     * Choose, which cases_by_year to update.
     */
    where: cases_by_yearWhereUniqueInput
  }

  /**
   * cases_by_year updateMany
   */
  export type cases_by_yearUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cases_by_years.
     */
    data: XOR<cases_by_yearUpdateManyMutationInput, cases_by_yearUncheckedUpdateManyInput>
    /**
     * Filter which cases_by_years to update
     */
    where?: cases_by_yearWhereInput
  }

  /**
   * cases_by_year upsert
   */
  export type cases_by_yearUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_by_year
     */
    select?: cases_by_yearSelect<ExtArgs> | null
    /**
     * The filter to search for the cases_by_year to update in case it exists.
     */
    where: cases_by_yearWhereUniqueInput
    /**
     * In case the cases_by_year found by the `where` argument doesn't exist, create a new cases_by_year with this data.
     */
    create: XOR<cases_by_yearCreateInput, cases_by_yearUncheckedCreateInput>
    /**
     * In case the cases_by_year was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cases_by_yearUpdateInput, cases_by_yearUncheckedUpdateInput>
  }

  /**
   * cases_by_year delete
   */
  export type cases_by_yearDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_by_year
     */
    select?: cases_by_yearSelect<ExtArgs> | null
    /**
     * Filter which cases_by_year to delete.
     */
    where: cases_by_yearWhereUniqueInput
  }

  /**
   * cases_by_year deleteMany
   */
  export type cases_by_yearDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cases_by_years to delete
     */
    where?: cases_by_yearWhereInput
  }

  /**
   * cases_by_year without action
   */
  export type cases_by_yearDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_by_year
     */
    select?: cases_by_yearSelect<ExtArgs> | null
  }


  /**
   * Model cases_citations
   */

  export type AggregateCases_citations = {
    _count: Cases_citationsCountAggregateOutputType | null
    _min: Cases_citationsMinAggregateOutputType | null
    _max: Cases_citationsMaxAggregateOutputType | null
  }

  export type Cases_citationsMinAggregateOutputType = {
    id: string | null
    case_uuid: string | null
    citation: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Cases_citationsMaxAggregateOutputType = {
    id: string | null
    case_uuid: string | null
    citation: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Cases_citationsCountAggregateOutputType = {
    id: number
    case_uuid: number
    citation: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Cases_citationsMinAggregateInputType = {
    id?: true
    case_uuid?: true
    citation?: true
    created_at?: true
    updated_at?: true
  }

  export type Cases_citationsMaxAggregateInputType = {
    id?: true
    case_uuid?: true
    citation?: true
    created_at?: true
    updated_at?: true
  }

  export type Cases_citationsCountAggregateInputType = {
    id?: true
    case_uuid?: true
    citation?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Cases_citationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cases_citations to aggregate.
     */
    where?: cases_citationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cases_citations to fetch.
     */
    orderBy?: cases_citationsOrderByWithRelationInput | cases_citationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cases_citationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cases_citations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cases_citations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cases_citations
    **/
    _count?: true | Cases_citationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cases_citationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cases_citationsMaxAggregateInputType
  }

  export type GetCases_citationsAggregateType<T extends Cases_citationsAggregateArgs> = {
        [P in keyof T & keyof AggregateCases_citations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCases_citations[P]>
      : GetScalarType<T[P], AggregateCases_citations[P]>
  }




  export type cases_citationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cases_citationsWhereInput
    orderBy?: cases_citationsOrderByWithAggregationInput | cases_citationsOrderByWithAggregationInput[]
    by: Cases_citationsScalarFieldEnum[] | Cases_citationsScalarFieldEnum
    having?: cases_citationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cases_citationsCountAggregateInputType | true
    _min?: Cases_citationsMinAggregateInputType
    _max?: Cases_citationsMaxAggregateInputType
  }

  export type Cases_citationsGroupByOutputType = {
    id: string
    case_uuid: string
    citation: string | null
    created_at: Date | null
    updated_at: Date | null
    _count: Cases_citationsCountAggregateOutputType | null
    _min: Cases_citationsMinAggregateOutputType | null
    _max: Cases_citationsMaxAggregateOutputType | null
  }

  type GetCases_citationsGroupByPayload<T extends cases_citationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cases_citationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cases_citationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cases_citationsGroupByOutputType[P]>
            : GetScalarType<T[P], Cases_citationsGroupByOutputType[P]>
        }
      >
    >


  export type cases_citationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    case_uuid?: boolean
    citation?: boolean
    created_at?: boolean
    updated_at?: boolean
    supreme_court_cases?: boolean | supreme_court_casesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cases_citations"]>

  export type cases_citationsSelectScalar = {
    id?: boolean
    case_uuid?: boolean
    citation?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type cases_citationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supreme_court_cases?: boolean | supreme_court_casesDefaultArgs<ExtArgs>
  }


  export type $cases_citationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cases_citations"
    objects: {
      supreme_court_cases: Prisma.$supreme_court_casesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      case_uuid: string
      citation: string | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["cases_citations"]>
    composites: {}
  }


  type cases_citationsGetPayload<S extends boolean | null | undefined | cases_citationsDefaultArgs> = $Result.GetResult<Prisma.$cases_citationsPayload, S>

  type cases_citationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cases_citationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Cases_citationsCountAggregateInputType | true
    }

  export interface cases_citationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cases_citations'], meta: { name: 'cases_citations' } }
    /**
     * Find zero or one Cases_citations that matches the filter.
     * @param {cases_citationsFindUniqueArgs} args - Arguments to find a Cases_citations
     * @example
     * // Get one Cases_citations
     * const cases_citations = await prisma.cases_citations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cases_citationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, cases_citationsFindUniqueArgs<ExtArgs>>
    ): Prisma__cases_citationsClient<$Result.GetResult<Prisma.$cases_citationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cases_citations that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {cases_citationsFindUniqueOrThrowArgs} args - Arguments to find a Cases_citations
     * @example
     * // Get one Cases_citations
     * const cases_citations = await prisma.cases_citations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cases_citationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cases_citationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__cases_citationsClient<$Result.GetResult<Prisma.$cases_citationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cases_citations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cases_citationsFindFirstArgs} args - Arguments to find a Cases_citations
     * @example
     * // Get one Cases_citations
     * const cases_citations = await prisma.cases_citations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cases_citationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, cases_citationsFindFirstArgs<ExtArgs>>
    ): Prisma__cases_citationsClient<$Result.GetResult<Prisma.$cases_citationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cases_citations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cases_citationsFindFirstOrThrowArgs} args - Arguments to find a Cases_citations
     * @example
     * // Get one Cases_citations
     * const cases_citations = await prisma.cases_citations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cases_citationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cases_citationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__cases_citationsClient<$Result.GetResult<Prisma.$cases_citationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cases_citations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cases_citationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cases_citations
     * const cases_citations = await prisma.cases_citations.findMany()
     * 
     * // Get first 10 Cases_citations
     * const cases_citations = await prisma.cases_citations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cases_citationsWithIdOnly = await prisma.cases_citations.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends cases_citationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cases_citationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cases_citationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cases_citations.
     * @param {cases_citationsCreateArgs} args - Arguments to create a Cases_citations.
     * @example
     * // Create one Cases_citations
     * const Cases_citations = await prisma.cases_citations.create({
     *   data: {
     *     // ... data to create a Cases_citations
     *   }
     * })
     * 
    **/
    create<T extends cases_citationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, cases_citationsCreateArgs<ExtArgs>>
    ): Prisma__cases_citationsClient<$Result.GetResult<Prisma.$cases_citationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cases_citations.
     * @param {cases_citationsCreateManyArgs} args - Arguments to create many Cases_citations.
     * @example
     * // Create many Cases_citations
     * const cases_citations = await prisma.cases_citations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends cases_citationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cases_citationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cases_citations and returns the data saved in the database.
     * @param {cases_citationsCreateManyAndReturnArgs} args - Arguments to create many Cases_citations.
     * @example
     * // Create many Cases_citations
     * const cases_citations = await prisma.cases_citations.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cases_citations and only return the `id`
     * const cases_citationsWithIdOnly = await prisma.cases_citations.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends cases_citationsCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, cases_citationsCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cases_citationsPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Cases_citations.
     * @param {cases_citationsDeleteArgs} args - Arguments to delete one Cases_citations.
     * @example
     * // Delete one Cases_citations
     * const Cases_citations = await prisma.cases_citations.delete({
     *   where: {
     *     // ... filter to delete one Cases_citations
     *   }
     * })
     * 
    **/
    delete<T extends cases_citationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, cases_citationsDeleteArgs<ExtArgs>>
    ): Prisma__cases_citationsClient<$Result.GetResult<Prisma.$cases_citationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cases_citations.
     * @param {cases_citationsUpdateArgs} args - Arguments to update one Cases_citations.
     * @example
     * // Update one Cases_citations
     * const cases_citations = await prisma.cases_citations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cases_citationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, cases_citationsUpdateArgs<ExtArgs>>
    ): Prisma__cases_citationsClient<$Result.GetResult<Prisma.$cases_citationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cases_citations.
     * @param {cases_citationsDeleteManyArgs} args - Arguments to filter Cases_citations to delete.
     * @example
     * // Delete a few Cases_citations
     * const { count } = await prisma.cases_citations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cases_citationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cases_citationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases_citations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cases_citationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cases_citations
     * const cases_citations = await prisma.cases_citations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cases_citationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, cases_citationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cases_citations.
     * @param {cases_citationsUpsertArgs} args - Arguments to update or create a Cases_citations.
     * @example
     * // Update or create a Cases_citations
     * const cases_citations = await prisma.cases_citations.upsert({
     *   create: {
     *     // ... data to create a Cases_citations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cases_citations we want to update
     *   }
     * })
    **/
    upsert<T extends cases_citationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, cases_citationsUpsertArgs<ExtArgs>>
    ): Prisma__cases_citationsClient<$Result.GetResult<Prisma.$cases_citationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cases_citations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cases_citationsCountArgs} args - Arguments to filter Cases_citations to count.
     * @example
     * // Count the number of Cases_citations
     * const count = await prisma.cases_citations.count({
     *   where: {
     *     // ... the filter for the Cases_citations we want to count
     *   }
     * })
    **/
    count<T extends cases_citationsCountArgs>(
      args?: Subset<T, cases_citationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cases_citationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cases_citations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cases_citationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cases_citationsAggregateArgs>(args: Subset<T, Cases_citationsAggregateArgs>): Prisma.PrismaPromise<GetCases_citationsAggregateType<T>>

    /**
     * Group by Cases_citations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cases_citationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cases_citationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cases_citationsGroupByArgs['orderBy'] }
        : { orderBy?: cases_citationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cases_citationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCases_citationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cases_citations model
   */
  readonly fields: cases_citationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cases_citations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cases_citationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    supreme_court_cases<T extends supreme_court_casesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, supreme_court_casesDefaultArgs<ExtArgs>>): Prisma__supreme_court_casesClient<$Result.GetResult<Prisma.$supreme_court_casesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the cases_citations model
   */ 
  interface cases_citationsFieldRefs {
    readonly id: FieldRef<"cases_citations", 'String'>
    readonly case_uuid: FieldRef<"cases_citations", 'String'>
    readonly citation: FieldRef<"cases_citations", 'String'>
    readonly created_at: FieldRef<"cases_citations", 'DateTime'>
    readonly updated_at: FieldRef<"cases_citations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * cases_citations findUnique
   */
  export type cases_citationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_citations
     */
    select?: cases_citationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cases_citationsInclude<ExtArgs> | null
    /**
     * Filter, which cases_citations to fetch.
     */
    where: cases_citationsWhereUniqueInput
  }

  /**
   * cases_citations findUniqueOrThrow
   */
  export type cases_citationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_citations
     */
    select?: cases_citationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cases_citationsInclude<ExtArgs> | null
    /**
     * Filter, which cases_citations to fetch.
     */
    where: cases_citationsWhereUniqueInput
  }

  /**
   * cases_citations findFirst
   */
  export type cases_citationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_citations
     */
    select?: cases_citationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cases_citationsInclude<ExtArgs> | null
    /**
     * Filter, which cases_citations to fetch.
     */
    where?: cases_citationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cases_citations to fetch.
     */
    orderBy?: cases_citationsOrderByWithRelationInput | cases_citationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cases_citations.
     */
    cursor?: cases_citationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cases_citations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cases_citations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cases_citations.
     */
    distinct?: Cases_citationsScalarFieldEnum | Cases_citationsScalarFieldEnum[]
  }

  /**
   * cases_citations findFirstOrThrow
   */
  export type cases_citationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_citations
     */
    select?: cases_citationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cases_citationsInclude<ExtArgs> | null
    /**
     * Filter, which cases_citations to fetch.
     */
    where?: cases_citationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cases_citations to fetch.
     */
    orderBy?: cases_citationsOrderByWithRelationInput | cases_citationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cases_citations.
     */
    cursor?: cases_citationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cases_citations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cases_citations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cases_citations.
     */
    distinct?: Cases_citationsScalarFieldEnum | Cases_citationsScalarFieldEnum[]
  }

  /**
   * cases_citations findMany
   */
  export type cases_citationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_citations
     */
    select?: cases_citationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cases_citationsInclude<ExtArgs> | null
    /**
     * Filter, which cases_citations to fetch.
     */
    where?: cases_citationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cases_citations to fetch.
     */
    orderBy?: cases_citationsOrderByWithRelationInput | cases_citationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cases_citations.
     */
    cursor?: cases_citationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cases_citations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cases_citations.
     */
    skip?: number
    distinct?: Cases_citationsScalarFieldEnum | Cases_citationsScalarFieldEnum[]
  }

  /**
   * cases_citations create
   */
  export type cases_citationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_citations
     */
    select?: cases_citationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cases_citationsInclude<ExtArgs> | null
    /**
     * The data needed to create a cases_citations.
     */
    data: XOR<cases_citationsCreateInput, cases_citationsUncheckedCreateInput>
  }

  /**
   * cases_citations createMany
   */
  export type cases_citationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cases_citations.
     */
    data: cases_citationsCreateManyInput | cases_citationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cases_citations createManyAndReturn
   */
  export type cases_citationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_citations
     */
    select?: cases_citationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cases_citationsInclude<ExtArgs> | null
    /**
     * The data used to create many cases_citations.
     */
    data: cases_citationsCreateManyInput | cases_citationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cases_citations update
   */
  export type cases_citationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_citations
     */
    select?: cases_citationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cases_citationsInclude<ExtArgs> | null
    /**
     * The data needed to update a cases_citations.
     */
    data: XOR<cases_citationsUpdateInput, cases_citationsUncheckedUpdateInput>
    /**
     * Choose, which cases_citations to update.
     */
    where: cases_citationsWhereUniqueInput
  }

  /**
   * cases_citations updateMany
   */
  export type cases_citationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cases_citations.
     */
    data: XOR<cases_citationsUpdateManyMutationInput, cases_citationsUncheckedUpdateManyInput>
    /**
     * Filter which cases_citations to update
     */
    where?: cases_citationsWhereInput
  }

  /**
   * cases_citations upsert
   */
  export type cases_citationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_citations
     */
    select?: cases_citationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cases_citationsInclude<ExtArgs> | null
    /**
     * The filter to search for the cases_citations to update in case it exists.
     */
    where: cases_citationsWhereUniqueInput
    /**
     * In case the cases_citations found by the `where` argument doesn't exist, create a new cases_citations with this data.
     */
    create: XOR<cases_citationsCreateInput, cases_citationsUncheckedCreateInput>
    /**
     * In case the cases_citations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cases_citationsUpdateInput, cases_citationsUncheckedUpdateInput>
  }

  /**
   * cases_citations delete
   */
  export type cases_citationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_citations
     */
    select?: cases_citationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cases_citationsInclude<ExtArgs> | null
    /**
     * Filter which cases_citations to delete.
     */
    where: cases_citationsWhereUniqueInput
  }

  /**
   * cases_citations deleteMany
   */
  export type cases_citationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cases_citations to delete
     */
    where?: cases_citationsWhereInput
  }

  /**
   * cases_citations without action
   */
  export type cases_citationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_citations
     */
    select?: cases_citationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cases_citationsInclude<ExtArgs> | null
  }


  /**
   * Model ny_appeals_court_cases
   */

  export type AggregateNy_appeals_court_cases = {
    _count: Ny_appeals_court_casesCountAggregateOutputType | null
    _min: Ny_appeals_court_casesMinAggregateOutputType | null
    _max: Ny_appeals_court_casesMaxAggregateOutputType | null
  }

  export type Ny_appeals_court_casesMinAggregateOutputType = {
    name: string | null
    link: string | null
    citation: string | null
    opinion: string | null
    uuid: string | null
    id: string | null
  }

  export type Ny_appeals_court_casesMaxAggregateOutputType = {
    name: string | null
    link: string | null
    citation: string | null
    opinion: string | null
    uuid: string | null
    id: string | null
  }

  export type Ny_appeals_court_casesCountAggregateOutputType = {
    name: number
    link: number
    citation: number
    opinion: number
    uuid: number
    id: number
    _all: number
  }


  export type Ny_appeals_court_casesMinAggregateInputType = {
    name?: true
    link?: true
    citation?: true
    opinion?: true
    uuid?: true
    id?: true
  }

  export type Ny_appeals_court_casesMaxAggregateInputType = {
    name?: true
    link?: true
    citation?: true
    opinion?: true
    uuid?: true
    id?: true
  }

  export type Ny_appeals_court_casesCountAggregateInputType = {
    name?: true
    link?: true
    citation?: true
    opinion?: true
    uuid?: true
    id?: true
    _all?: true
  }

  export type Ny_appeals_court_casesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ny_appeals_court_cases to aggregate.
     */
    where?: ny_appeals_court_casesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ny_appeals_court_cases to fetch.
     */
    orderBy?: ny_appeals_court_casesOrderByWithRelationInput | ny_appeals_court_casesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ny_appeals_court_casesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ny_appeals_court_cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ny_appeals_court_cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ny_appeals_court_cases
    **/
    _count?: true | Ny_appeals_court_casesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ny_appeals_court_casesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ny_appeals_court_casesMaxAggregateInputType
  }

  export type GetNy_appeals_court_casesAggregateType<T extends Ny_appeals_court_casesAggregateArgs> = {
        [P in keyof T & keyof AggregateNy_appeals_court_cases]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNy_appeals_court_cases[P]>
      : GetScalarType<T[P], AggregateNy_appeals_court_cases[P]>
  }




  export type ny_appeals_court_casesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ny_appeals_court_casesWhereInput
    orderBy?: ny_appeals_court_casesOrderByWithAggregationInput | ny_appeals_court_casesOrderByWithAggregationInput[]
    by: Ny_appeals_court_casesScalarFieldEnum[] | Ny_appeals_court_casesScalarFieldEnum
    having?: ny_appeals_court_casesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ny_appeals_court_casesCountAggregateInputType | true
    _min?: Ny_appeals_court_casesMinAggregateInputType
    _max?: Ny_appeals_court_casesMaxAggregateInputType
  }

  export type Ny_appeals_court_casesGroupByOutputType = {
    name: string | null
    link: string | null
    citation: string | null
    opinion: string | null
    uuid: string | null
    id: string
    _count: Ny_appeals_court_casesCountAggregateOutputType | null
    _min: Ny_appeals_court_casesMinAggregateOutputType | null
    _max: Ny_appeals_court_casesMaxAggregateOutputType | null
  }

  type GetNy_appeals_court_casesGroupByPayload<T extends ny_appeals_court_casesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ny_appeals_court_casesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ny_appeals_court_casesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ny_appeals_court_casesGroupByOutputType[P]>
            : GetScalarType<T[P], Ny_appeals_court_casesGroupByOutputType[P]>
        }
      >
    >


  export type ny_appeals_court_casesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    link?: boolean
    citation?: boolean
    opinion?: boolean
    uuid?: boolean
    id?: boolean
  }, ExtArgs["result"]["ny_appeals_court_cases"]>

  export type ny_appeals_court_casesSelectScalar = {
    name?: boolean
    link?: boolean
    citation?: boolean
    opinion?: boolean
    uuid?: boolean
    id?: boolean
  }



  export type $ny_appeals_court_casesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ny_appeals_court_cases"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      name: string | null
      link: string | null
      citation: string | null
      opinion: string | null
      uuid: string | null
      id: string
    }, ExtArgs["result"]["ny_appeals_court_cases"]>
    composites: {}
  }


  type ny_appeals_court_casesGetPayload<S extends boolean | null | undefined | ny_appeals_court_casesDefaultArgs> = $Result.GetResult<Prisma.$ny_appeals_court_casesPayload, S>

  type ny_appeals_court_casesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ny_appeals_court_casesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Ny_appeals_court_casesCountAggregateInputType | true
    }

  export interface ny_appeals_court_casesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ny_appeals_court_cases'], meta: { name: 'ny_appeals_court_cases' } }
    /**
     * Find zero or one Ny_appeals_court_cases that matches the filter.
     * @param {ny_appeals_court_casesFindUniqueArgs} args - Arguments to find a Ny_appeals_court_cases
     * @example
     * // Get one Ny_appeals_court_cases
     * const ny_appeals_court_cases = await prisma.ny_appeals_court_cases.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ny_appeals_court_casesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ny_appeals_court_casesFindUniqueArgs<ExtArgs>>
    ): Prisma__ny_appeals_court_casesClient<$Result.GetResult<Prisma.$ny_appeals_court_casesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Ny_appeals_court_cases that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ny_appeals_court_casesFindUniqueOrThrowArgs} args - Arguments to find a Ny_appeals_court_cases
     * @example
     * // Get one Ny_appeals_court_cases
     * const ny_appeals_court_cases = await prisma.ny_appeals_court_cases.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ny_appeals_court_casesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ny_appeals_court_casesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ny_appeals_court_casesClient<$Result.GetResult<Prisma.$ny_appeals_court_casesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Ny_appeals_court_cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ny_appeals_court_casesFindFirstArgs} args - Arguments to find a Ny_appeals_court_cases
     * @example
     * // Get one Ny_appeals_court_cases
     * const ny_appeals_court_cases = await prisma.ny_appeals_court_cases.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ny_appeals_court_casesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ny_appeals_court_casesFindFirstArgs<ExtArgs>>
    ): Prisma__ny_appeals_court_casesClient<$Result.GetResult<Prisma.$ny_appeals_court_casesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Ny_appeals_court_cases that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ny_appeals_court_casesFindFirstOrThrowArgs} args - Arguments to find a Ny_appeals_court_cases
     * @example
     * // Get one Ny_appeals_court_cases
     * const ny_appeals_court_cases = await prisma.ny_appeals_court_cases.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ny_appeals_court_casesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ny_appeals_court_casesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ny_appeals_court_casesClient<$Result.GetResult<Prisma.$ny_appeals_court_casesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ny_appeals_court_cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ny_appeals_court_casesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ny_appeals_court_cases
     * const ny_appeals_court_cases = await prisma.ny_appeals_court_cases.findMany()
     * 
     * // Get first 10 Ny_appeals_court_cases
     * const ny_appeals_court_cases = await prisma.ny_appeals_court_cases.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const ny_appeals_court_casesWithNameOnly = await prisma.ny_appeals_court_cases.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends ny_appeals_court_casesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ny_appeals_court_casesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ny_appeals_court_casesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Ny_appeals_court_cases.
     * @param {ny_appeals_court_casesCreateArgs} args - Arguments to create a Ny_appeals_court_cases.
     * @example
     * // Create one Ny_appeals_court_cases
     * const Ny_appeals_court_cases = await prisma.ny_appeals_court_cases.create({
     *   data: {
     *     // ... data to create a Ny_appeals_court_cases
     *   }
     * })
     * 
    **/
    create<T extends ny_appeals_court_casesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ny_appeals_court_casesCreateArgs<ExtArgs>>
    ): Prisma__ny_appeals_court_casesClient<$Result.GetResult<Prisma.$ny_appeals_court_casesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ny_appeals_court_cases.
     * @param {ny_appeals_court_casesCreateManyArgs} args - Arguments to create many Ny_appeals_court_cases.
     * @example
     * // Create many Ny_appeals_court_cases
     * const ny_appeals_court_cases = await prisma.ny_appeals_court_cases.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ny_appeals_court_casesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ny_appeals_court_casesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ny_appeals_court_cases and returns the data saved in the database.
     * @param {ny_appeals_court_casesCreateManyAndReturnArgs} args - Arguments to create many Ny_appeals_court_cases.
     * @example
     * // Create many Ny_appeals_court_cases
     * const ny_appeals_court_cases = await prisma.ny_appeals_court_cases.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ny_appeals_court_cases and only return the `name`
     * const ny_appeals_court_casesWithNameOnly = await prisma.ny_appeals_court_cases.createManyAndReturn({ 
     *   select: { name: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ny_appeals_court_casesCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ny_appeals_court_casesCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ny_appeals_court_casesPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Ny_appeals_court_cases.
     * @param {ny_appeals_court_casesDeleteArgs} args - Arguments to delete one Ny_appeals_court_cases.
     * @example
     * // Delete one Ny_appeals_court_cases
     * const Ny_appeals_court_cases = await prisma.ny_appeals_court_cases.delete({
     *   where: {
     *     // ... filter to delete one Ny_appeals_court_cases
     *   }
     * })
     * 
    **/
    delete<T extends ny_appeals_court_casesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ny_appeals_court_casesDeleteArgs<ExtArgs>>
    ): Prisma__ny_appeals_court_casesClient<$Result.GetResult<Prisma.$ny_appeals_court_casesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Ny_appeals_court_cases.
     * @param {ny_appeals_court_casesUpdateArgs} args - Arguments to update one Ny_appeals_court_cases.
     * @example
     * // Update one Ny_appeals_court_cases
     * const ny_appeals_court_cases = await prisma.ny_appeals_court_cases.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ny_appeals_court_casesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ny_appeals_court_casesUpdateArgs<ExtArgs>>
    ): Prisma__ny_appeals_court_casesClient<$Result.GetResult<Prisma.$ny_appeals_court_casesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ny_appeals_court_cases.
     * @param {ny_appeals_court_casesDeleteManyArgs} args - Arguments to filter Ny_appeals_court_cases to delete.
     * @example
     * // Delete a few Ny_appeals_court_cases
     * const { count } = await prisma.ny_appeals_court_cases.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ny_appeals_court_casesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ny_appeals_court_casesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ny_appeals_court_cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ny_appeals_court_casesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ny_appeals_court_cases
     * const ny_appeals_court_cases = await prisma.ny_appeals_court_cases.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ny_appeals_court_casesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ny_appeals_court_casesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ny_appeals_court_cases.
     * @param {ny_appeals_court_casesUpsertArgs} args - Arguments to update or create a Ny_appeals_court_cases.
     * @example
     * // Update or create a Ny_appeals_court_cases
     * const ny_appeals_court_cases = await prisma.ny_appeals_court_cases.upsert({
     *   create: {
     *     // ... data to create a Ny_appeals_court_cases
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ny_appeals_court_cases we want to update
     *   }
     * })
    **/
    upsert<T extends ny_appeals_court_casesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ny_appeals_court_casesUpsertArgs<ExtArgs>>
    ): Prisma__ny_appeals_court_casesClient<$Result.GetResult<Prisma.$ny_appeals_court_casesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ny_appeals_court_cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ny_appeals_court_casesCountArgs} args - Arguments to filter Ny_appeals_court_cases to count.
     * @example
     * // Count the number of Ny_appeals_court_cases
     * const count = await prisma.ny_appeals_court_cases.count({
     *   where: {
     *     // ... the filter for the Ny_appeals_court_cases we want to count
     *   }
     * })
    **/
    count<T extends ny_appeals_court_casesCountArgs>(
      args?: Subset<T, ny_appeals_court_casesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ny_appeals_court_casesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ny_appeals_court_cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ny_appeals_court_casesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ny_appeals_court_casesAggregateArgs>(args: Subset<T, Ny_appeals_court_casesAggregateArgs>): Prisma.PrismaPromise<GetNy_appeals_court_casesAggregateType<T>>

    /**
     * Group by Ny_appeals_court_cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ny_appeals_court_casesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ny_appeals_court_casesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ny_appeals_court_casesGroupByArgs['orderBy'] }
        : { orderBy?: ny_appeals_court_casesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ny_appeals_court_casesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNy_appeals_court_casesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ny_appeals_court_cases model
   */
  readonly fields: ny_appeals_court_casesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ny_appeals_court_cases.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ny_appeals_court_casesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ny_appeals_court_cases model
   */ 
  interface ny_appeals_court_casesFieldRefs {
    readonly name: FieldRef<"ny_appeals_court_cases", 'String'>
    readonly link: FieldRef<"ny_appeals_court_cases", 'String'>
    readonly citation: FieldRef<"ny_appeals_court_cases", 'String'>
    readonly opinion: FieldRef<"ny_appeals_court_cases", 'String'>
    readonly uuid: FieldRef<"ny_appeals_court_cases", 'String'>
    readonly id: FieldRef<"ny_appeals_court_cases", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ny_appeals_court_cases findUnique
   */
  export type ny_appeals_court_casesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ny_appeals_court_cases
     */
    select?: ny_appeals_court_casesSelect<ExtArgs> | null
    /**
     * Filter, which ny_appeals_court_cases to fetch.
     */
    where: ny_appeals_court_casesWhereUniqueInput
  }

  /**
   * ny_appeals_court_cases findUniqueOrThrow
   */
  export type ny_appeals_court_casesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ny_appeals_court_cases
     */
    select?: ny_appeals_court_casesSelect<ExtArgs> | null
    /**
     * Filter, which ny_appeals_court_cases to fetch.
     */
    where: ny_appeals_court_casesWhereUniqueInput
  }

  /**
   * ny_appeals_court_cases findFirst
   */
  export type ny_appeals_court_casesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ny_appeals_court_cases
     */
    select?: ny_appeals_court_casesSelect<ExtArgs> | null
    /**
     * Filter, which ny_appeals_court_cases to fetch.
     */
    where?: ny_appeals_court_casesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ny_appeals_court_cases to fetch.
     */
    orderBy?: ny_appeals_court_casesOrderByWithRelationInput | ny_appeals_court_casesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ny_appeals_court_cases.
     */
    cursor?: ny_appeals_court_casesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ny_appeals_court_cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ny_appeals_court_cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ny_appeals_court_cases.
     */
    distinct?: Ny_appeals_court_casesScalarFieldEnum | Ny_appeals_court_casesScalarFieldEnum[]
  }

  /**
   * ny_appeals_court_cases findFirstOrThrow
   */
  export type ny_appeals_court_casesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ny_appeals_court_cases
     */
    select?: ny_appeals_court_casesSelect<ExtArgs> | null
    /**
     * Filter, which ny_appeals_court_cases to fetch.
     */
    where?: ny_appeals_court_casesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ny_appeals_court_cases to fetch.
     */
    orderBy?: ny_appeals_court_casesOrderByWithRelationInput | ny_appeals_court_casesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ny_appeals_court_cases.
     */
    cursor?: ny_appeals_court_casesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ny_appeals_court_cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ny_appeals_court_cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ny_appeals_court_cases.
     */
    distinct?: Ny_appeals_court_casesScalarFieldEnum | Ny_appeals_court_casesScalarFieldEnum[]
  }

  /**
   * ny_appeals_court_cases findMany
   */
  export type ny_appeals_court_casesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ny_appeals_court_cases
     */
    select?: ny_appeals_court_casesSelect<ExtArgs> | null
    /**
     * Filter, which ny_appeals_court_cases to fetch.
     */
    where?: ny_appeals_court_casesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ny_appeals_court_cases to fetch.
     */
    orderBy?: ny_appeals_court_casesOrderByWithRelationInput | ny_appeals_court_casesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ny_appeals_court_cases.
     */
    cursor?: ny_appeals_court_casesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ny_appeals_court_cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ny_appeals_court_cases.
     */
    skip?: number
    distinct?: Ny_appeals_court_casesScalarFieldEnum | Ny_appeals_court_casesScalarFieldEnum[]
  }

  /**
   * ny_appeals_court_cases create
   */
  export type ny_appeals_court_casesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ny_appeals_court_cases
     */
    select?: ny_appeals_court_casesSelect<ExtArgs> | null
    /**
     * The data needed to create a ny_appeals_court_cases.
     */
    data?: XOR<ny_appeals_court_casesCreateInput, ny_appeals_court_casesUncheckedCreateInput>
  }

  /**
   * ny_appeals_court_cases createMany
   */
  export type ny_appeals_court_casesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ny_appeals_court_cases.
     */
    data: ny_appeals_court_casesCreateManyInput | ny_appeals_court_casesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ny_appeals_court_cases createManyAndReturn
   */
  export type ny_appeals_court_casesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ny_appeals_court_cases
     */
    select?: ny_appeals_court_casesSelect<ExtArgs> | null
    /**
     * The data used to create many ny_appeals_court_cases.
     */
    data: ny_appeals_court_casesCreateManyInput | ny_appeals_court_casesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ny_appeals_court_cases update
   */
  export type ny_appeals_court_casesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ny_appeals_court_cases
     */
    select?: ny_appeals_court_casesSelect<ExtArgs> | null
    /**
     * The data needed to update a ny_appeals_court_cases.
     */
    data: XOR<ny_appeals_court_casesUpdateInput, ny_appeals_court_casesUncheckedUpdateInput>
    /**
     * Choose, which ny_appeals_court_cases to update.
     */
    where: ny_appeals_court_casesWhereUniqueInput
  }

  /**
   * ny_appeals_court_cases updateMany
   */
  export type ny_appeals_court_casesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ny_appeals_court_cases.
     */
    data: XOR<ny_appeals_court_casesUpdateManyMutationInput, ny_appeals_court_casesUncheckedUpdateManyInput>
    /**
     * Filter which ny_appeals_court_cases to update
     */
    where?: ny_appeals_court_casesWhereInput
  }

  /**
   * ny_appeals_court_cases upsert
   */
  export type ny_appeals_court_casesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ny_appeals_court_cases
     */
    select?: ny_appeals_court_casesSelect<ExtArgs> | null
    /**
     * The filter to search for the ny_appeals_court_cases to update in case it exists.
     */
    where: ny_appeals_court_casesWhereUniqueInput
    /**
     * In case the ny_appeals_court_cases found by the `where` argument doesn't exist, create a new ny_appeals_court_cases with this data.
     */
    create: XOR<ny_appeals_court_casesCreateInput, ny_appeals_court_casesUncheckedCreateInput>
    /**
     * In case the ny_appeals_court_cases was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ny_appeals_court_casesUpdateInput, ny_appeals_court_casesUncheckedUpdateInput>
  }

  /**
   * ny_appeals_court_cases delete
   */
  export type ny_appeals_court_casesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ny_appeals_court_cases
     */
    select?: ny_appeals_court_casesSelect<ExtArgs> | null
    /**
     * Filter which ny_appeals_court_cases to delete.
     */
    where: ny_appeals_court_casesWhereUniqueInput
  }

  /**
   * ny_appeals_court_cases deleteMany
   */
  export type ny_appeals_court_casesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ny_appeals_court_cases to delete
     */
    where?: ny_appeals_court_casesWhereInput
  }

  /**
   * ny_appeals_court_cases without action
   */
  export type ny_appeals_court_casesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ny_appeals_court_cases
     */
    select?: ny_appeals_court_casesSelect<ExtArgs> | null
  }


  /**
   * Model supreme_court_cases
   */

  export type AggregateSupreme_court_cases = {
    _count: Supreme_court_casesCountAggregateOutputType | null
    _min: Supreme_court_casesMinAggregateOutputType | null
    _max: Supreme_court_casesMaxAggregateOutputType | null
  }

  export type Supreme_court_casesMinAggregateOutputType = {
    id: string | null
    name: string | null
    href: string | null
    view_count: string | null
    docket_number: string | null
    additional_docket_numbers: string | null
    manner_of_jurisdiction: string | null
    first_party: string | null
    second_party: string | null
    facts_of_the_case: string | null
    question: string | null
    conclusion: string | null
    first_party_label: string | null
    second_party_label: string | null
    term: string | null
    description: string | null
    written_opinion: string | null
    related_cases: string | null
    justia_url: string | null
    argument2_url: string | null
    uuid: string | null
  }

  export type Supreme_court_casesMaxAggregateOutputType = {
    id: string | null
    name: string | null
    href: string | null
    view_count: string | null
    docket_number: string | null
    additional_docket_numbers: string | null
    manner_of_jurisdiction: string | null
    first_party: string | null
    second_party: string | null
    facts_of_the_case: string | null
    question: string | null
    conclusion: string | null
    first_party_label: string | null
    second_party_label: string | null
    term: string | null
    description: string | null
    written_opinion: string | null
    related_cases: string | null
    justia_url: string | null
    argument2_url: string | null
    uuid: string | null
  }

  export type Supreme_court_casesCountAggregateOutputType = {
    id: number
    name: number
    href: number
    view_count: number
    docket_number: number
    additional_docket_numbers: number
    manner_of_jurisdiction: number
    first_party: number
    second_party: number
    timeline: number
    lower_court: number
    facts_of_the_case: number
    question: number
    conclusion: number
    advocates: number
    oral_argument_audio: number
    citation: number
    decisions: number
    first_party_label: number
    second_party_label: number
    heard_by: number
    decided_by: number
    term: number
    location: number
    opinion_announcement: number
    description: number
    written_opinion: number
    related_cases: number
    justia_url: number
    argument2_url: number
    uuid: number
    _all: number
  }


  export type Supreme_court_casesMinAggregateInputType = {
    id?: true
    name?: true
    href?: true
    view_count?: true
    docket_number?: true
    additional_docket_numbers?: true
    manner_of_jurisdiction?: true
    first_party?: true
    second_party?: true
    facts_of_the_case?: true
    question?: true
    conclusion?: true
    first_party_label?: true
    second_party_label?: true
    term?: true
    description?: true
    written_opinion?: true
    related_cases?: true
    justia_url?: true
    argument2_url?: true
    uuid?: true
  }

  export type Supreme_court_casesMaxAggregateInputType = {
    id?: true
    name?: true
    href?: true
    view_count?: true
    docket_number?: true
    additional_docket_numbers?: true
    manner_of_jurisdiction?: true
    first_party?: true
    second_party?: true
    facts_of_the_case?: true
    question?: true
    conclusion?: true
    first_party_label?: true
    second_party_label?: true
    term?: true
    description?: true
    written_opinion?: true
    related_cases?: true
    justia_url?: true
    argument2_url?: true
    uuid?: true
  }

  export type Supreme_court_casesCountAggregateInputType = {
    id?: true
    name?: true
    href?: true
    view_count?: true
    docket_number?: true
    additional_docket_numbers?: true
    manner_of_jurisdiction?: true
    first_party?: true
    second_party?: true
    timeline?: true
    lower_court?: true
    facts_of_the_case?: true
    question?: true
    conclusion?: true
    advocates?: true
    oral_argument_audio?: true
    citation?: true
    decisions?: true
    first_party_label?: true
    second_party_label?: true
    heard_by?: true
    decided_by?: true
    term?: true
    location?: true
    opinion_announcement?: true
    description?: true
    written_opinion?: true
    related_cases?: true
    justia_url?: true
    argument2_url?: true
    uuid?: true
    _all?: true
  }

  export type Supreme_court_casesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which supreme_court_cases to aggregate.
     */
    where?: supreme_court_casesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of supreme_court_cases to fetch.
     */
    orderBy?: supreme_court_casesOrderByWithRelationInput | supreme_court_casesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: supreme_court_casesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` supreme_court_cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` supreme_court_cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned supreme_court_cases
    **/
    _count?: true | Supreme_court_casesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Supreme_court_casesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Supreme_court_casesMaxAggregateInputType
  }

  export type GetSupreme_court_casesAggregateType<T extends Supreme_court_casesAggregateArgs> = {
        [P in keyof T & keyof AggregateSupreme_court_cases]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupreme_court_cases[P]>
      : GetScalarType<T[P], AggregateSupreme_court_cases[P]>
  }




  export type supreme_court_casesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: supreme_court_casesWhereInput
    orderBy?: supreme_court_casesOrderByWithAggregationInput | supreme_court_casesOrderByWithAggregationInput[]
    by: Supreme_court_casesScalarFieldEnum[] | Supreme_court_casesScalarFieldEnum
    having?: supreme_court_casesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Supreme_court_casesCountAggregateInputType | true
    _min?: Supreme_court_casesMinAggregateInputType
    _max?: Supreme_court_casesMaxAggregateInputType
  }

  export type Supreme_court_casesGroupByOutputType = {
    id: string
    name: string | null
    href: string | null
    view_count: string | null
    docket_number: string | null
    additional_docket_numbers: string | null
    manner_of_jurisdiction: string | null
    first_party: string | null
    second_party: string | null
    timeline: JsonValue | null
    lower_court: JsonValue | null
    facts_of_the_case: string | null
    question: string | null
    conclusion: string | null
    advocates: JsonValue | null
    oral_argument_audio: JsonValue | null
    citation: JsonValue | null
    decisions: JsonValue | null
    first_party_label: string | null
    second_party_label: string | null
    heard_by: JsonValue | null
    decided_by: JsonValue | null
    term: string | null
    location: JsonValue | null
    opinion_announcement: JsonValue | null
    description: string | null
    written_opinion: string | null
    related_cases: string | null
    justia_url: string | null
    argument2_url: string | null
    uuid: string
    _count: Supreme_court_casesCountAggregateOutputType | null
    _min: Supreme_court_casesMinAggregateOutputType | null
    _max: Supreme_court_casesMaxAggregateOutputType | null
  }

  type GetSupreme_court_casesGroupByPayload<T extends supreme_court_casesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Supreme_court_casesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Supreme_court_casesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Supreme_court_casesGroupByOutputType[P]>
            : GetScalarType<T[P], Supreme_court_casesGroupByOutputType[P]>
        }
      >
    >


  export type supreme_court_casesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    href?: boolean
    view_count?: boolean
    docket_number?: boolean
    additional_docket_numbers?: boolean
    manner_of_jurisdiction?: boolean
    first_party?: boolean
    second_party?: boolean
    timeline?: boolean
    lower_court?: boolean
    facts_of_the_case?: boolean
    question?: boolean
    conclusion?: boolean
    advocates?: boolean
    oral_argument_audio?: boolean
    citation?: boolean
    decisions?: boolean
    first_party_label?: boolean
    second_party_label?: boolean
    heard_by?: boolean
    decided_by?: boolean
    term?: boolean
    location?: boolean
    opinion_announcement?: boolean
    description?: boolean
    written_opinion?: boolean
    related_cases?: boolean
    justia_url?: boolean
    argument2_url?: boolean
    uuid?: boolean
    cases_citations?: boolean | supreme_court_cases$cases_citationsArgs<ExtArgs>
    _count?: boolean | Supreme_court_casesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supreme_court_cases"]>

  export type supreme_court_casesSelectScalar = {
    id?: boolean
    name?: boolean
    href?: boolean
    view_count?: boolean
    docket_number?: boolean
    additional_docket_numbers?: boolean
    manner_of_jurisdiction?: boolean
    first_party?: boolean
    second_party?: boolean
    timeline?: boolean
    lower_court?: boolean
    facts_of_the_case?: boolean
    question?: boolean
    conclusion?: boolean
    advocates?: boolean
    oral_argument_audio?: boolean
    citation?: boolean
    decisions?: boolean
    first_party_label?: boolean
    second_party_label?: boolean
    heard_by?: boolean
    decided_by?: boolean
    term?: boolean
    location?: boolean
    opinion_announcement?: boolean
    description?: boolean
    written_opinion?: boolean
    related_cases?: boolean
    justia_url?: boolean
    argument2_url?: boolean
    uuid?: boolean
  }


  export type supreme_court_casesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cases_citations?: boolean | supreme_court_cases$cases_citationsArgs<ExtArgs>
    _count?: boolean | Supreme_court_casesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $supreme_court_casesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "supreme_court_cases"
    objects: {
      cases_citations: Prisma.$cases_citationsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      href: string | null
      view_count: string | null
      docket_number: string | null
      additional_docket_numbers: string | null
      manner_of_jurisdiction: string | null
      first_party: string | null
      second_party: string | null
      timeline: Prisma.JsonValue | null
      lower_court: Prisma.JsonValue | null
      facts_of_the_case: string | null
      question: string | null
      conclusion: string | null
      advocates: Prisma.JsonValue | null
      oral_argument_audio: Prisma.JsonValue | null
      citation: Prisma.JsonValue | null
      decisions: Prisma.JsonValue | null
      first_party_label: string | null
      second_party_label: string | null
      heard_by: Prisma.JsonValue | null
      decided_by: Prisma.JsonValue | null
      term: string | null
      location: Prisma.JsonValue | null
      opinion_announcement: Prisma.JsonValue | null
      description: string | null
      written_opinion: string | null
      related_cases: string | null
      justia_url: string | null
      argument2_url: string | null
      uuid: string
    }, ExtArgs["result"]["supreme_court_cases"]>
    composites: {}
  }


  type supreme_court_casesGetPayload<S extends boolean | null | undefined | supreme_court_casesDefaultArgs> = $Result.GetResult<Prisma.$supreme_court_casesPayload, S>

  type supreme_court_casesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<supreme_court_casesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Supreme_court_casesCountAggregateInputType | true
    }

  export interface supreme_court_casesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['supreme_court_cases'], meta: { name: 'supreme_court_cases' } }
    /**
     * Find zero or one Supreme_court_cases that matches the filter.
     * @param {supreme_court_casesFindUniqueArgs} args - Arguments to find a Supreme_court_cases
     * @example
     * // Get one Supreme_court_cases
     * const supreme_court_cases = await prisma.supreme_court_cases.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends supreme_court_casesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, supreme_court_casesFindUniqueArgs<ExtArgs>>
    ): Prisma__supreme_court_casesClient<$Result.GetResult<Prisma.$supreme_court_casesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Supreme_court_cases that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {supreme_court_casesFindUniqueOrThrowArgs} args - Arguments to find a Supreme_court_cases
     * @example
     * // Get one Supreme_court_cases
     * const supreme_court_cases = await prisma.supreme_court_cases.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends supreme_court_casesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, supreme_court_casesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__supreme_court_casesClient<$Result.GetResult<Prisma.$supreme_court_casesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Supreme_court_cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {supreme_court_casesFindFirstArgs} args - Arguments to find a Supreme_court_cases
     * @example
     * // Get one Supreme_court_cases
     * const supreme_court_cases = await prisma.supreme_court_cases.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends supreme_court_casesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, supreme_court_casesFindFirstArgs<ExtArgs>>
    ): Prisma__supreme_court_casesClient<$Result.GetResult<Prisma.$supreme_court_casesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Supreme_court_cases that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {supreme_court_casesFindFirstOrThrowArgs} args - Arguments to find a Supreme_court_cases
     * @example
     * // Get one Supreme_court_cases
     * const supreme_court_cases = await prisma.supreme_court_cases.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends supreme_court_casesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, supreme_court_casesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__supreme_court_casesClient<$Result.GetResult<Prisma.$supreme_court_casesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Supreme_court_cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {supreme_court_casesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Supreme_court_cases
     * const supreme_court_cases = await prisma.supreme_court_cases.findMany()
     * 
     * // Get first 10 Supreme_court_cases
     * const supreme_court_cases = await prisma.supreme_court_cases.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supreme_court_casesWithIdOnly = await prisma.supreme_court_cases.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends supreme_court_casesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, supreme_court_casesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$supreme_court_casesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Supreme_court_cases.
     * @param {supreme_court_casesCreateArgs} args - Arguments to create a Supreme_court_cases.
     * @example
     * // Create one Supreme_court_cases
     * const Supreme_court_cases = await prisma.supreme_court_cases.create({
     *   data: {
     *     // ... data to create a Supreme_court_cases
     *   }
     * })
     * 
    **/
    create<T extends supreme_court_casesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, supreme_court_casesCreateArgs<ExtArgs>>
    ): Prisma__supreme_court_casesClient<$Result.GetResult<Prisma.$supreme_court_casesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Supreme_court_cases.
     * @param {supreme_court_casesCreateManyArgs} args - Arguments to create many Supreme_court_cases.
     * @example
     * // Create many Supreme_court_cases
     * const supreme_court_cases = await prisma.supreme_court_cases.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends supreme_court_casesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, supreme_court_casesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Supreme_court_cases and returns the data saved in the database.
     * @param {supreme_court_casesCreateManyAndReturnArgs} args - Arguments to create many Supreme_court_cases.
     * @example
     * // Create many Supreme_court_cases
     * const supreme_court_cases = await prisma.supreme_court_cases.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Supreme_court_cases and only return the `id`
     * const supreme_court_casesWithIdOnly = await prisma.supreme_court_cases.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends supreme_court_casesCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, supreme_court_casesCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$supreme_court_casesPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Supreme_court_cases.
     * @param {supreme_court_casesDeleteArgs} args - Arguments to delete one Supreme_court_cases.
     * @example
     * // Delete one Supreme_court_cases
     * const Supreme_court_cases = await prisma.supreme_court_cases.delete({
     *   where: {
     *     // ... filter to delete one Supreme_court_cases
     *   }
     * })
     * 
    **/
    delete<T extends supreme_court_casesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, supreme_court_casesDeleteArgs<ExtArgs>>
    ): Prisma__supreme_court_casesClient<$Result.GetResult<Prisma.$supreme_court_casesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Supreme_court_cases.
     * @param {supreme_court_casesUpdateArgs} args - Arguments to update one Supreme_court_cases.
     * @example
     * // Update one Supreme_court_cases
     * const supreme_court_cases = await prisma.supreme_court_cases.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends supreme_court_casesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, supreme_court_casesUpdateArgs<ExtArgs>>
    ): Prisma__supreme_court_casesClient<$Result.GetResult<Prisma.$supreme_court_casesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Supreme_court_cases.
     * @param {supreme_court_casesDeleteManyArgs} args - Arguments to filter Supreme_court_cases to delete.
     * @example
     * // Delete a few Supreme_court_cases
     * const { count } = await prisma.supreme_court_cases.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends supreme_court_casesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, supreme_court_casesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Supreme_court_cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {supreme_court_casesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Supreme_court_cases
     * const supreme_court_cases = await prisma.supreme_court_cases.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends supreme_court_casesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, supreme_court_casesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Supreme_court_cases.
     * @param {supreme_court_casesUpsertArgs} args - Arguments to update or create a Supreme_court_cases.
     * @example
     * // Update or create a Supreme_court_cases
     * const supreme_court_cases = await prisma.supreme_court_cases.upsert({
     *   create: {
     *     // ... data to create a Supreme_court_cases
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Supreme_court_cases we want to update
     *   }
     * })
    **/
    upsert<T extends supreme_court_casesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, supreme_court_casesUpsertArgs<ExtArgs>>
    ): Prisma__supreme_court_casesClient<$Result.GetResult<Prisma.$supreme_court_casesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Supreme_court_cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {supreme_court_casesCountArgs} args - Arguments to filter Supreme_court_cases to count.
     * @example
     * // Count the number of Supreme_court_cases
     * const count = await prisma.supreme_court_cases.count({
     *   where: {
     *     // ... the filter for the Supreme_court_cases we want to count
     *   }
     * })
    **/
    count<T extends supreme_court_casesCountArgs>(
      args?: Subset<T, supreme_court_casesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Supreme_court_casesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Supreme_court_cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Supreme_court_casesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Supreme_court_casesAggregateArgs>(args: Subset<T, Supreme_court_casesAggregateArgs>): Prisma.PrismaPromise<GetSupreme_court_casesAggregateType<T>>

    /**
     * Group by Supreme_court_cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {supreme_court_casesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends supreme_court_casesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: supreme_court_casesGroupByArgs['orderBy'] }
        : { orderBy?: supreme_court_casesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, supreme_court_casesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupreme_court_casesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the supreme_court_cases model
   */
  readonly fields: supreme_court_casesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for supreme_court_cases.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__supreme_court_casesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cases_citations<T extends supreme_court_cases$cases_citationsArgs<ExtArgs> = {}>(args?: Subset<T, supreme_court_cases$cases_citationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cases_citationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the supreme_court_cases model
   */ 
  interface supreme_court_casesFieldRefs {
    readonly id: FieldRef<"supreme_court_cases", 'String'>
    readonly name: FieldRef<"supreme_court_cases", 'String'>
    readonly href: FieldRef<"supreme_court_cases", 'String'>
    readonly view_count: FieldRef<"supreme_court_cases", 'String'>
    readonly docket_number: FieldRef<"supreme_court_cases", 'String'>
    readonly additional_docket_numbers: FieldRef<"supreme_court_cases", 'String'>
    readonly manner_of_jurisdiction: FieldRef<"supreme_court_cases", 'String'>
    readonly first_party: FieldRef<"supreme_court_cases", 'String'>
    readonly second_party: FieldRef<"supreme_court_cases", 'String'>
    readonly timeline: FieldRef<"supreme_court_cases", 'Json'>
    readonly lower_court: FieldRef<"supreme_court_cases", 'Json'>
    readonly facts_of_the_case: FieldRef<"supreme_court_cases", 'String'>
    readonly question: FieldRef<"supreme_court_cases", 'String'>
    readonly conclusion: FieldRef<"supreme_court_cases", 'String'>
    readonly advocates: FieldRef<"supreme_court_cases", 'Json'>
    readonly oral_argument_audio: FieldRef<"supreme_court_cases", 'Json'>
    readonly citation: FieldRef<"supreme_court_cases", 'Json'>
    readonly decisions: FieldRef<"supreme_court_cases", 'Json'>
    readonly first_party_label: FieldRef<"supreme_court_cases", 'String'>
    readonly second_party_label: FieldRef<"supreme_court_cases", 'String'>
    readonly heard_by: FieldRef<"supreme_court_cases", 'Json'>
    readonly decided_by: FieldRef<"supreme_court_cases", 'Json'>
    readonly term: FieldRef<"supreme_court_cases", 'String'>
    readonly location: FieldRef<"supreme_court_cases", 'Json'>
    readonly opinion_announcement: FieldRef<"supreme_court_cases", 'Json'>
    readonly description: FieldRef<"supreme_court_cases", 'String'>
    readonly written_opinion: FieldRef<"supreme_court_cases", 'String'>
    readonly related_cases: FieldRef<"supreme_court_cases", 'String'>
    readonly justia_url: FieldRef<"supreme_court_cases", 'String'>
    readonly argument2_url: FieldRef<"supreme_court_cases", 'String'>
    readonly uuid: FieldRef<"supreme_court_cases", 'String'>
  }
    

  // Custom InputTypes
  /**
   * supreme_court_cases findUnique
   */
  export type supreme_court_casesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supreme_court_cases
     */
    select?: supreme_court_casesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supreme_court_casesInclude<ExtArgs> | null
    /**
     * Filter, which supreme_court_cases to fetch.
     */
    where: supreme_court_casesWhereUniqueInput
  }

  /**
   * supreme_court_cases findUniqueOrThrow
   */
  export type supreme_court_casesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supreme_court_cases
     */
    select?: supreme_court_casesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supreme_court_casesInclude<ExtArgs> | null
    /**
     * Filter, which supreme_court_cases to fetch.
     */
    where: supreme_court_casesWhereUniqueInput
  }

  /**
   * supreme_court_cases findFirst
   */
  export type supreme_court_casesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supreme_court_cases
     */
    select?: supreme_court_casesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supreme_court_casesInclude<ExtArgs> | null
    /**
     * Filter, which supreme_court_cases to fetch.
     */
    where?: supreme_court_casesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of supreme_court_cases to fetch.
     */
    orderBy?: supreme_court_casesOrderByWithRelationInput | supreme_court_casesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for supreme_court_cases.
     */
    cursor?: supreme_court_casesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` supreme_court_cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` supreme_court_cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of supreme_court_cases.
     */
    distinct?: Supreme_court_casesScalarFieldEnum | Supreme_court_casesScalarFieldEnum[]
  }

  /**
   * supreme_court_cases findFirstOrThrow
   */
  export type supreme_court_casesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supreme_court_cases
     */
    select?: supreme_court_casesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supreme_court_casesInclude<ExtArgs> | null
    /**
     * Filter, which supreme_court_cases to fetch.
     */
    where?: supreme_court_casesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of supreme_court_cases to fetch.
     */
    orderBy?: supreme_court_casesOrderByWithRelationInput | supreme_court_casesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for supreme_court_cases.
     */
    cursor?: supreme_court_casesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` supreme_court_cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` supreme_court_cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of supreme_court_cases.
     */
    distinct?: Supreme_court_casesScalarFieldEnum | Supreme_court_casesScalarFieldEnum[]
  }

  /**
   * supreme_court_cases findMany
   */
  export type supreme_court_casesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supreme_court_cases
     */
    select?: supreme_court_casesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supreme_court_casesInclude<ExtArgs> | null
    /**
     * Filter, which supreme_court_cases to fetch.
     */
    where?: supreme_court_casesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of supreme_court_cases to fetch.
     */
    orderBy?: supreme_court_casesOrderByWithRelationInput | supreme_court_casesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing supreme_court_cases.
     */
    cursor?: supreme_court_casesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` supreme_court_cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` supreme_court_cases.
     */
    skip?: number
    distinct?: Supreme_court_casesScalarFieldEnum | Supreme_court_casesScalarFieldEnum[]
  }

  /**
   * supreme_court_cases create
   */
  export type supreme_court_casesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supreme_court_cases
     */
    select?: supreme_court_casesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supreme_court_casesInclude<ExtArgs> | null
    /**
     * The data needed to create a supreme_court_cases.
     */
    data: XOR<supreme_court_casesCreateInput, supreme_court_casesUncheckedCreateInput>
  }

  /**
   * supreme_court_cases createMany
   */
  export type supreme_court_casesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many supreme_court_cases.
     */
    data: supreme_court_casesCreateManyInput | supreme_court_casesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * supreme_court_cases createManyAndReturn
   */
  export type supreme_court_casesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supreme_court_cases
     */
    select?: supreme_court_casesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supreme_court_casesInclude<ExtArgs> | null
    /**
     * The data used to create many supreme_court_cases.
     */
    data: supreme_court_casesCreateManyInput | supreme_court_casesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * supreme_court_cases update
   */
  export type supreme_court_casesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supreme_court_cases
     */
    select?: supreme_court_casesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supreme_court_casesInclude<ExtArgs> | null
    /**
     * The data needed to update a supreme_court_cases.
     */
    data: XOR<supreme_court_casesUpdateInput, supreme_court_casesUncheckedUpdateInput>
    /**
     * Choose, which supreme_court_cases to update.
     */
    where: supreme_court_casesWhereUniqueInput
  }

  /**
   * supreme_court_cases updateMany
   */
  export type supreme_court_casesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update supreme_court_cases.
     */
    data: XOR<supreme_court_casesUpdateManyMutationInput, supreme_court_casesUncheckedUpdateManyInput>
    /**
     * Filter which supreme_court_cases to update
     */
    where?: supreme_court_casesWhereInput
  }

  /**
   * supreme_court_cases upsert
   */
  export type supreme_court_casesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supreme_court_cases
     */
    select?: supreme_court_casesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supreme_court_casesInclude<ExtArgs> | null
    /**
     * The filter to search for the supreme_court_cases to update in case it exists.
     */
    where: supreme_court_casesWhereUniqueInput
    /**
     * In case the supreme_court_cases found by the `where` argument doesn't exist, create a new supreme_court_cases with this data.
     */
    create: XOR<supreme_court_casesCreateInput, supreme_court_casesUncheckedCreateInput>
    /**
     * In case the supreme_court_cases was found with the provided `where` argument, update it with this data.
     */
    update: XOR<supreme_court_casesUpdateInput, supreme_court_casesUncheckedUpdateInput>
  }

  /**
   * supreme_court_cases delete
   */
  export type supreme_court_casesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supreme_court_cases
     */
    select?: supreme_court_casesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supreme_court_casesInclude<ExtArgs> | null
    /**
     * Filter which supreme_court_cases to delete.
     */
    where: supreme_court_casesWhereUniqueInput
  }

  /**
   * supreme_court_cases deleteMany
   */
  export type supreme_court_casesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which supreme_court_cases to delete
     */
    where?: supreme_court_casesWhereInput
  }

  /**
   * supreme_court_cases.cases_citations
   */
  export type supreme_court_cases$cases_citationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases_citations
     */
    select?: cases_citationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cases_citationsInclude<ExtArgs> | null
    where?: cases_citationsWhereInput
    orderBy?: cases_citationsOrderByWithRelationInput | cases_citationsOrderByWithRelationInput[]
    cursor?: cases_citationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Cases_citationsScalarFieldEnum | Cases_citationsScalarFieldEnum[]
  }

  /**
   * supreme_court_cases without action
   */
  export type supreme_court_casesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supreme_court_cases
     */
    select?: supreme_court_casesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supreme_court_casesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Cases_by_yearScalarFieldEnum: {
    oyez_id: 'oyez_id',
    year: 'year',
    docket_number: 'docket_number',
    uuid: 'uuid'
  };

  export type Cases_by_yearScalarFieldEnum = (typeof Cases_by_yearScalarFieldEnum)[keyof typeof Cases_by_yearScalarFieldEnum]


  export const Cases_citationsScalarFieldEnum: {
    id: 'id',
    case_uuid: 'case_uuid',
    citation: 'citation',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Cases_citationsScalarFieldEnum = (typeof Cases_citationsScalarFieldEnum)[keyof typeof Cases_citationsScalarFieldEnum]


  export const Ny_appeals_court_casesScalarFieldEnum: {
    name: 'name',
    link: 'link',
    citation: 'citation',
    opinion: 'opinion',
    uuid: 'uuid',
    id: 'id'
  };

  export type Ny_appeals_court_casesScalarFieldEnum = (typeof Ny_appeals_court_casesScalarFieldEnum)[keyof typeof Ny_appeals_court_casesScalarFieldEnum]


  export const Supreme_court_casesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    href: 'href',
    view_count: 'view_count',
    docket_number: 'docket_number',
    additional_docket_numbers: 'additional_docket_numbers',
    manner_of_jurisdiction: 'manner_of_jurisdiction',
    first_party: 'first_party',
    second_party: 'second_party',
    timeline: 'timeline',
    lower_court: 'lower_court',
    facts_of_the_case: 'facts_of_the_case',
    question: 'question',
    conclusion: 'conclusion',
    advocates: 'advocates',
    oral_argument_audio: 'oral_argument_audio',
    citation: 'citation',
    decisions: 'decisions',
    first_party_label: 'first_party_label',
    second_party_label: 'second_party_label',
    heard_by: 'heard_by',
    decided_by: 'decided_by',
    term: 'term',
    location: 'location',
    opinion_announcement: 'opinion_announcement',
    description: 'description',
    written_opinion: 'written_opinion',
    related_cases: 'related_cases',
    justia_url: 'justia_url',
    argument2_url: 'argument2_url',
    uuid: 'uuid'
  };

  export type Supreme_court_casesScalarFieldEnum = (typeof Supreme_court_casesScalarFieldEnum)[keyof typeof Supreme_court_casesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type cases_by_yearWhereInput = {
    AND?: cases_by_yearWhereInput | cases_by_yearWhereInput[]
    OR?: cases_by_yearWhereInput[]
    NOT?: cases_by_yearWhereInput | cases_by_yearWhereInput[]
    oyez_id?: StringFilter<"cases_by_year"> | string
    year?: IntNullableFilter<"cases_by_year"> | number | null
    docket_number?: StringNullableFilter<"cases_by_year"> | string | null
    uuid?: UuidNullableFilter<"cases_by_year"> | string | null
  }

  export type cases_by_yearOrderByWithRelationInput = {
    oyez_id?: SortOrder
    year?: SortOrderInput | SortOrder
    docket_number?: SortOrderInput | SortOrder
    uuid?: SortOrderInput | SortOrder
  }

  export type cases_by_yearWhereUniqueInput = Prisma.AtLeast<{
    oyez_id?: string
    AND?: cases_by_yearWhereInput | cases_by_yearWhereInput[]
    OR?: cases_by_yearWhereInput[]
    NOT?: cases_by_yearWhereInput | cases_by_yearWhereInput[]
    year?: IntNullableFilter<"cases_by_year"> | number | null
    docket_number?: StringNullableFilter<"cases_by_year"> | string | null
    uuid?: UuidNullableFilter<"cases_by_year"> | string | null
  }, "oyez_id">

  export type cases_by_yearOrderByWithAggregationInput = {
    oyez_id?: SortOrder
    year?: SortOrderInput | SortOrder
    docket_number?: SortOrderInput | SortOrder
    uuid?: SortOrderInput | SortOrder
    _count?: cases_by_yearCountOrderByAggregateInput
    _avg?: cases_by_yearAvgOrderByAggregateInput
    _max?: cases_by_yearMaxOrderByAggregateInput
    _min?: cases_by_yearMinOrderByAggregateInput
    _sum?: cases_by_yearSumOrderByAggregateInput
  }

  export type cases_by_yearScalarWhereWithAggregatesInput = {
    AND?: cases_by_yearScalarWhereWithAggregatesInput | cases_by_yearScalarWhereWithAggregatesInput[]
    OR?: cases_by_yearScalarWhereWithAggregatesInput[]
    NOT?: cases_by_yearScalarWhereWithAggregatesInput | cases_by_yearScalarWhereWithAggregatesInput[]
    oyez_id?: StringWithAggregatesFilter<"cases_by_year"> | string
    year?: IntNullableWithAggregatesFilter<"cases_by_year"> | number | null
    docket_number?: StringNullableWithAggregatesFilter<"cases_by_year"> | string | null
    uuid?: UuidNullableWithAggregatesFilter<"cases_by_year"> | string | null
  }

  export type cases_citationsWhereInput = {
    AND?: cases_citationsWhereInput | cases_citationsWhereInput[]
    OR?: cases_citationsWhereInput[]
    NOT?: cases_citationsWhereInput | cases_citationsWhereInput[]
    id?: UuidFilter<"cases_citations"> | string
    case_uuid?: UuidFilter<"cases_citations"> | string
    citation?: StringNullableFilter<"cases_citations"> | string | null
    created_at?: DateTimeNullableFilter<"cases_citations"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"cases_citations"> | Date | string | null
    supreme_court_cases?: XOR<Supreme_court_casesRelationFilter, supreme_court_casesWhereInput>
  }

  export type cases_citationsOrderByWithRelationInput = {
    id?: SortOrder
    case_uuid?: SortOrder
    citation?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    supreme_court_cases?: supreme_court_casesOrderByWithRelationInput
  }

  export type cases_citationsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: cases_citationsWhereInput | cases_citationsWhereInput[]
    OR?: cases_citationsWhereInput[]
    NOT?: cases_citationsWhereInput | cases_citationsWhereInput[]
    case_uuid?: UuidFilter<"cases_citations"> | string
    citation?: StringNullableFilter<"cases_citations"> | string | null
    created_at?: DateTimeNullableFilter<"cases_citations"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"cases_citations"> | Date | string | null
    supreme_court_cases?: XOR<Supreme_court_casesRelationFilter, supreme_court_casesWhereInput>
  }, "id">

  export type cases_citationsOrderByWithAggregationInput = {
    id?: SortOrder
    case_uuid?: SortOrder
    citation?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: cases_citationsCountOrderByAggregateInput
    _max?: cases_citationsMaxOrderByAggregateInput
    _min?: cases_citationsMinOrderByAggregateInput
  }

  export type cases_citationsScalarWhereWithAggregatesInput = {
    AND?: cases_citationsScalarWhereWithAggregatesInput | cases_citationsScalarWhereWithAggregatesInput[]
    OR?: cases_citationsScalarWhereWithAggregatesInput[]
    NOT?: cases_citationsScalarWhereWithAggregatesInput | cases_citationsScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"cases_citations"> | string
    case_uuid?: UuidWithAggregatesFilter<"cases_citations"> | string
    citation?: StringNullableWithAggregatesFilter<"cases_citations"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"cases_citations"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"cases_citations"> | Date | string | null
  }

  export type ny_appeals_court_casesWhereInput = {
    AND?: ny_appeals_court_casesWhereInput | ny_appeals_court_casesWhereInput[]
    OR?: ny_appeals_court_casesWhereInput[]
    NOT?: ny_appeals_court_casesWhereInput | ny_appeals_court_casesWhereInput[]
    name?: StringNullableFilter<"ny_appeals_court_cases"> | string | null
    link?: StringNullableFilter<"ny_appeals_court_cases"> | string | null
    citation?: StringNullableFilter<"ny_appeals_court_cases"> | string | null
    opinion?: StringNullableFilter<"ny_appeals_court_cases"> | string | null
    uuid?: UuidNullableFilter<"ny_appeals_court_cases"> | string | null
    id?: UuidFilter<"ny_appeals_court_cases"> | string
  }

  export type ny_appeals_court_casesOrderByWithRelationInput = {
    name?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    citation?: SortOrderInput | SortOrder
    opinion?: SortOrderInput | SortOrder
    uuid?: SortOrderInput | SortOrder
    id?: SortOrder
  }

  export type ny_appeals_court_casesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ny_appeals_court_casesWhereInput | ny_appeals_court_casesWhereInput[]
    OR?: ny_appeals_court_casesWhereInput[]
    NOT?: ny_appeals_court_casesWhereInput | ny_appeals_court_casesWhereInput[]
    name?: StringNullableFilter<"ny_appeals_court_cases"> | string | null
    link?: StringNullableFilter<"ny_appeals_court_cases"> | string | null
    citation?: StringNullableFilter<"ny_appeals_court_cases"> | string | null
    opinion?: StringNullableFilter<"ny_appeals_court_cases"> | string | null
    uuid?: UuidNullableFilter<"ny_appeals_court_cases"> | string | null
  }, "id">

  export type ny_appeals_court_casesOrderByWithAggregationInput = {
    name?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    citation?: SortOrderInput | SortOrder
    opinion?: SortOrderInput | SortOrder
    uuid?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: ny_appeals_court_casesCountOrderByAggregateInput
    _max?: ny_appeals_court_casesMaxOrderByAggregateInput
    _min?: ny_appeals_court_casesMinOrderByAggregateInput
  }

  export type ny_appeals_court_casesScalarWhereWithAggregatesInput = {
    AND?: ny_appeals_court_casesScalarWhereWithAggregatesInput | ny_appeals_court_casesScalarWhereWithAggregatesInput[]
    OR?: ny_appeals_court_casesScalarWhereWithAggregatesInput[]
    NOT?: ny_appeals_court_casesScalarWhereWithAggregatesInput | ny_appeals_court_casesScalarWhereWithAggregatesInput[]
    name?: StringNullableWithAggregatesFilter<"ny_appeals_court_cases"> | string | null
    link?: StringNullableWithAggregatesFilter<"ny_appeals_court_cases"> | string | null
    citation?: StringNullableWithAggregatesFilter<"ny_appeals_court_cases"> | string | null
    opinion?: StringNullableWithAggregatesFilter<"ny_appeals_court_cases"> | string | null
    uuid?: UuidNullableWithAggregatesFilter<"ny_appeals_court_cases"> | string | null
    id?: UuidWithAggregatesFilter<"ny_appeals_court_cases"> | string
  }

  export type supreme_court_casesWhereInput = {
    AND?: supreme_court_casesWhereInput | supreme_court_casesWhereInput[]
    OR?: supreme_court_casesWhereInput[]
    NOT?: supreme_court_casesWhereInput | supreme_court_casesWhereInput[]
    id?: StringFilter<"supreme_court_cases"> | string
    name?: StringNullableFilter<"supreme_court_cases"> | string | null
    href?: StringNullableFilter<"supreme_court_cases"> | string | null
    view_count?: StringNullableFilter<"supreme_court_cases"> | string | null
    docket_number?: StringNullableFilter<"supreme_court_cases"> | string | null
    additional_docket_numbers?: StringNullableFilter<"supreme_court_cases"> | string | null
    manner_of_jurisdiction?: StringNullableFilter<"supreme_court_cases"> | string | null
    first_party?: StringNullableFilter<"supreme_court_cases"> | string | null
    second_party?: StringNullableFilter<"supreme_court_cases"> | string | null
    timeline?: JsonNullableFilter<"supreme_court_cases">
    lower_court?: JsonNullableFilter<"supreme_court_cases">
    facts_of_the_case?: StringNullableFilter<"supreme_court_cases"> | string | null
    question?: StringNullableFilter<"supreme_court_cases"> | string | null
    conclusion?: StringNullableFilter<"supreme_court_cases"> | string | null
    advocates?: JsonNullableFilter<"supreme_court_cases">
    oral_argument_audio?: JsonNullableFilter<"supreme_court_cases">
    citation?: JsonNullableFilter<"supreme_court_cases">
    decisions?: JsonNullableFilter<"supreme_court_cases">
    first_party_label?: StringNullableFilter<"supreme_court_cases"> | string | null
    second_party_label?: StringNullableFilter<"supreme_court_cases"> | string | null
    heard_by?: JsonNullableFilter<"supreme_court_cases">
    decided_by?: JsonNullableFilter<"supreme_court_cases">
    term?: StringNullableFilter<"supreme_court_cases"> | string | null
    location?: JsonNullableFilter<"supreme_court_cases">
    opinion_announcement?: JsonNullableFilter<"supreme_court_cases">
    description?: StringNullableFilter<"supreme_court_cases"> | string | null
    written_opinion?: StringNullableFilter<"supreme_court_cases"> | string | null
    related_cases?: StringNullableFilter<"supreme_court_cases"> | string | null
    justia_url?: StringNullableFilter<"supreme_court_cases"> | string | null
    argument2_url?: StringNullableFilter<"supreme_court_cases"> | string | null
    uuid?: UuidFilter<"supreme_court_cases"> | string
    cases_citations?: Cases_citationsListRelationFilter
  }

  export type supreme_court_casesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    href?: SortOrderInput | SortOrder
    view_count?: SortOrderInput | SortOrder
    docket_number?: SortOrderInput | SortOrder
    additional_docket_numbers?: SortOrderInput | SortOrder
    manner_of_jurisdiction?: SortOrderInput | SortOrder
    first_party?: SortOrderInput | SortOrder
    second_party?: SortOrderInput | SortOrder
    timeline?: SortOrderInput | SortOrder
    lower_court?: SortOrderInput | SortOrder
    facts_of_the_case?: SortOrderInput | SortOrder
    question?: SortOrderInput | SortOrder
    conclusion?: SortOrderInput | SortOrder
    advocates?: SortOrderInput | SortOrder
    oral_argument_audio?: SortOrderInput | SortOrder
    citation?: SortOrderInput | SortOrder
    decisions?: SortOrderInput | SortOrder
    first_party_label?: SortOrderInput | SortOrder
    second_party_label?: SortOrderInput | SortOrder
    heard_by?: SortOrderInput | SortOrder
    decided_by?: SortOrderInput | SortOrder
    term?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    opinion_announcement?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    written_opinion?: SortOrderInput | SortOrder
    related_cases?: SortOrderInput | SortOrder
    justia_url?: SortOrderInput | SortOrder
    argument2_url?: SortOrderInput | SortOrder
    uuid?: SortOrder
    cases_citations?: cases_citationsOrderByRelationAggregateInput
  }

  export type supreme_court_casesWhereUniqueInput = Prisma.AtLeast<{
    uuid?: string
    AND?: supreme_court_casesWhereInput | supreme_court_casesWhereInput[]
    OR?: supreme_court_casesWhereInput[]
    NOT?: supreme_court_casesWhereInput | supreme_court_casesWhereInput[]
    id?: StringFilter<"supreme_court_cases"> | string
    name?: StringNullableFilter<"supreme_court_cases"> | string | null
    href?: StringNullableFilter<"supreme_court_cases"> | string | null
    view_count?: StringNullableFilter<"supreme_court_cases"> | string | null
    docket_number?: StringNullableFilter<"supreme_court_cases"> | string | null
    additional_docket_numbers?: StringNullableFilter<"supreme_court_cases"> | string | null
    manner_of_jurisdiction?: StringNullableFilter<"supreme_court_cases"> | string | null
    first_party?: StringNullableFilter<"supreme_court_cases"> | string | null
    second_party?: StringNullableFilter<"supreme_court_cases"> | string | null
    timeline?: JsonNullableFilter<"supreme_court_cases">
    lower_court?: JsonNullableFilter<"supreme_court_cases">
    facts_of_the_case?: StringNullableFilter<"supreme_court_cases"> | string | null
    question?: StringNullableFilter<"supreme_court_cases"> | string | null
    conclusion?: StringNullableFilter<"supreme_court_cases"> | string | null
    advocates?: JsonNullableFilter<"supreme_court_cases">
    oral_argument_audio?: JsonNullableFilter<"supreme_court_cases">
    citation?: JsonNullableFilter<"supreme_court_cases">
    decisions?: JsonNullableFilter<"supreme_court_cases">
    first_party_label?: StringNullableFilter<"supreme_court_cases"> | string | null
    second_party_label?: StringNullableFilter<"supreme_court_cases"> | string | null
    heard_by?: JsonNullableFilter<"supreme_court_cases">
    decided_by?: JsonNullableFilter<"supreme_court_cases">
    term?: StringNullableFilter<"supreme_court_cases"> | string | null
    location?: JsonNullableFilter<"supreme_court_cases">
    opinion_announcement?: JsonNullableFilter<"supreme_court_cases">
    description?: StringNullableFilter<"supreme_court_cases"> | string | null
    written_opinion?: StringNullableFilter<"supreme_court_cases"> | string | null
    related_cases?: StringNullableFilter<"supreme_court_cases"> | string | null
    justia_url?: StringNullableFilter<"supreme_court_cases"> | string | null
    argument2_url?: StringNullableFilter<"supreme_court_cases"> | string | null
    cases_citations?: Cases_citationsListRelationFilter
  }, "uuid">

  export type supreme_court_casesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    href?: SortOrderInput | SortOrder
    view_count?: SortOrderInput | SortOrder
    docket_number?: SortOrderInput | SortOrder
    additional_docket_numbers?: SortOrderInput | SortOrder
    manner_of_jurisdiction?: SortOrderInput | SortOrder
    first_party?: SortOrderInput | SortOrder
    second_party?: SortOrderInput | SortOrder
    timeline?: SortOrderInput | SortOrder
    lower_court?: SortOrderInput | SortOrder
    facts_of_the_case?: SortOrderInput | SortOrder
    question?: SortOrderInput | SortOrder
    conclusion?: SortOrderInput | SortOrder
    advocates?: SortOrderInput | SortOrder
    oral_argument_audio?: SortOrderInput | SortOrder
    citation?: SortOrderInput | SortOrder
    decisions?: SortOrderInput | SortOrder
    first_party_label?: SortOrderInput | SortOrder
    second_party_label?: SortOrderInput | SortOrder
    heard_by?: SortOrderInput | SortOrder
    decided_by?: SortOrderInput | SortOrder
    term?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    opinion_announcement?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    written_opinion?: SortOrderInput | SortOrder
    related_cases?: SortOrderInput | SortOrder
    justia_url?: SortOrderInput | SortOrder
    argument2_url?: SortOrderInput | SortOrder
    uuid?: SortOrder
    _count?: supreme_court_casesCountOrderByAggregateInput
    _max?: supreme_court_casesMaxOrderByAggregateInput
    _min?: supreme_court_casesMinOrderByAggregateInput
  }

  export type supreme_court_casesScalarWhereWithAggregatesInput = {
    AND?: supreme_court_casesScalarWhereWithAggregatesInput | supreme_court_casesScalarWhereWithAggregatesInput[]
    OR?: supreme_court_casesScalarWhereWithAggregatesInput[]
    NOT?: supreme_court_casesScalarWhereWithAggregatesInput | supreme_court_casesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"supreme_court_cases"> | string
    name?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    href?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    view_count?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    docket_number?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    additional_docket_numbers?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    manner_of_jurisdiction?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    first_party?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    second_party?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    timeline?: JsonNullableWithAggregatesFilter<"supreme_court_cases">
    lower_court?: JsonNullableWithAggregatesFilter<"supreme_court_cases">
    facts_of_the_case?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    question?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    conclusion?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    advocates?: JsonNullableWithAggregatesFilter<"supreme_court_cases">
    oral_argument_audio?: JsonNullableWithAggregatesFilter<"supreme_court_cases">
    citation?: JsonNullableWithAggregatesFilter<"supreme_court_cases">
    decisions?: JsonNullableWithAggregatesFilter<"supreme_court_cases">
    first_party_label?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    second_party_label?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    heard_by?: JsonNullableWithAggregatesFilter<"supreme_court_cases">
    decided_by?: JsonNullableWithAggregatesFilter<"supreme_court_cases">
    term?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    location?: JsonNullableWithAggregatesFilter<"supreme_court_cases">
    opinion_announcement?: JsonNullableWithAggregatesFilter<"supreme_court_cases">
    description?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    written_opinion?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    related_cases?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    justia_url?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    argument2_url?: StringNullableWithAggregatesFilter<"supreme_court_cases"> | string | null
    uuid?: UuidWithAggregatesFilter<"supreme_court_cases"> | string
  }

  export type cases_by_yearCreateInput = {
    oyez_id: string
    year?: number | null
    docket_number?: string | null
    uuid?: string | null
  }

  export type cases_by_yearUncheckedCreateInput = {
    oyez_id: string
    year?: number | null
    docket_number?: string | null
    uuid?: string | null
  }

  export type cases_by_yearUpdateInput = {
    oyez_id?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    docket_number?: NullableStringFieldUpdateOperationsInput | string | null
    uuid?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type cases_by_yearUncheckedUpdateInput = {
    oyez_id?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    docket_number?: NullableStringFieldUpdateOperationsInput | string | null
    uuid?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type cases_by_yearCreateManyInput = {
    oyez_id: string
    year?: number | null
    docket_number?: string | null
    uuid?: string | null
  }

  export type cases_by_yearUpdateManyMutationInput = {
    oyez_id?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    docket_number?: NullableStringFieldUpdateOperationsInput | string | null
    uuid?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type cases_by_yearUncheckedUpdateManyInput = {
    oyez_id?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    docket_number?: NullableStringFieldUpdateOperationsInput | string | null
    uuid?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type cases_citationsCreateInput = {
    id?: string
    citation?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    supreme_court_cases: supreme_court_casesCreateNestedOneWithoutCases_citationsInput
  }

  export type cases_citationsUncheckedCreateInput = {
    id?: string
    case_uuid: string
    citation?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type cases_citationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supreme_court_cases?: supreme_court_casesUpdateOneRequiredWithoutCases_citationsNestedInput
  }

  export type cases_citationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    case_uuid?: StringFieldUpdateOperationsInput | string
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type cases_citationsCreateManyInput = {
    id?: string
    case_uuid: string
    citation?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type cases_citationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type cases_citationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    case_uuid?: StringFieldUpdateOperationsInput | string
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ny_appeals_court_casesCreateInput = {
    name?: string | null
    link?: string | null
    citation?: string | null
    opinion?: string | null
    uuid?: string | null
    id?: string
  }

  export type ny_appeals_court_casesUncheckedCreateInput = {
    name?: string | null
    link?: string | null
    citation?: string | null
    opinion?: string | null
    uuid?: string | null
    id?: string
  }

  export type ny_appeals_court_casesUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    opinion?: NullableStringFieldUpdateOperationsInput | string | null
    uuid?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ny_appeals_court_casesUncheckedUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    opinion?: NullableStringFieldUpdateOperationsInput | string | null
    uuid?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ny_appeals_court_casesCreateManyInput = {
    name?: string | null
    link?: string | null
    citation?: string | null
    opinion?: string | null
    uuid?: string | null
    id?: string
  }

  export type ny_appeals_court_casesUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    opinion?: NullableStringFieldUpdateOperationsInput | string | null
    uuid?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ny_appeals_court_casesUncheckedUpdateManyInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    opinion?: NullableStringFieldUpdateOperationsInput | string | null
    uuid?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
  }

  export type supreme_court_casesCreateInput = {
    id: string
    name?: string | null
    href?: string | null
    view_count?: string | null
    docket_number?: string | null
    additional_docket_numbers?: string | null
    manner_of_jurisdiction?: string | null
    first_party?: string | null
    second_party?: string | null
    timeline?: NullableJsonNullValueInput | InputJsonValue
    lower_court?: NullableJsonNullValueInput | InputJsonValue
    facts_of_the_case?: string | null
    question?: string | null
    conclusion?: string | null
    advocates?: NullableJsonNullValueInput | InputJsonValue
    oral_argument_audio?: NullableJsonNullValueInput | InputJsonValue
    citation?: NullableJsonNullValueInput | InputJsonValue
    decisions?: NullableJsonNullValueInput | InputJsonValue
    first_party_label?: string | null
    second_party_label?: string | null
    heard_by?: NullableJsonNullValueInput | InputJsonValue
    decided_by?: NullableJsonNullValueInput | InputJsonValue
    term?: string | null
    location?: NullableJsonNullValueInput | InputJsonValue
    opinion_announcement?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    written_opinion?: string | null
    related_cases?: string | null
    justia_url?: string | null
    argument2_url?: string | null
    uuid?: string
    cases_citations?: cases_citationsCreateNestedManyWithoutSupreme_court_casesInput
  }

  export type supreme_court_casesUncheckedCreateInput = {
    id: string
    name?: string | null
    href?: string | null
    view_count?: string | null
    docket_number?: string | null
    additional_docket_numbers?: string | null
    manner_of_jurisdiction?: string | null
    first_party?: string | null
    second_party?: string | null
    timeline?: NullableJsonNullValueInput | InputJsonValue
    lower_court?: NullableJsonNullValueInput | InputJsonValue
    facts_of_the_case?: string | null
    question?: string | null
    conclusion?: string | null
    advocates?: NullableJsonNullValueInput | InputJsonValue
    oral_argument_audio?: NullableJsonNullValueInput | InputJsonValue
    citation?: NullableJsonNullValueInput | InputJsonValue
    decisions?: NullableJsonNullValueInput | InputJsonValue
    first_party_label?: string | null
    second_party_label?: string | null
    heard_by?: NullableJsonNullValueInput | InputJsonValue
    decided_by?: NullableJsonNullValueInput | InputJsonValue
    term?: string | null
    location?: NullableJsonNullValueInput | InputJsonValue
    opinion_announcement?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    written_opinion?: string | null
    related_cases?: string | null
    justia_url?: string | null
    argument2_url?: string | null
    uuid?: string
    cases_citations?: cases_citationsUncheckedCreateNestedManyWithoutSupreme_court_casesInput
  }

  export type supreme_court_casesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    view_count?: NullableStringFieldUpdateOperationsInput | string | null
    docket_number?: NullableStringFieldUpdateOperationsInput | string | null
    additional_docket_numbers?: NullableStringFieldUpdateOperationsInput | string | null
    manner_of_jurisdiction?: NullableStringFieldUpdateOperationsInput | string | null
    first_party?: NullableStringFieldUpdateOperationsInput | string | null
    second_party?: NullableStringFieldUpdateOperationsInput | string | null
    timeline?: NullableJsonNullValueInput | InputJsonValue
    lower_court?: NullableJsonNullValueInput | InputJsonValue
    facts_of_the_case?: NullableStringFieldUpdateOperationsInput | string | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: NullableStringFieldUpdateOperationsInput | string | null
    advocates?: NullableJsonNullValueInput | InputJsonValue
    oral_argument_audio?: NullableJsonNullValueInput | InputJsonValue
    citation?: NullableJsonNullValueInput | InputJsonValue
    decisions?: NullableJsonNullValueInput | InputJsonValue
    first_party_label?: NullableStringFieldUpdateOperationsInput | string | null
    second_party_label?: NullableStringFieldUpdateOperationsInput | string | null
    heard_by?: NullableJsonNullValueInput | InputJsonValue
    decided_by?: NullableJsonNullValueInput | InputJsonValue
    term?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableJsonNullValueInput | InputJsonValue
    opinion_announcement?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    written_opinion?: NullableStringFieldUpdateOperationsInput | string | null
    related_cases?: NullableStringFieldUpdateOperationsInput | string | null
    justia_url?: NullableStringFieldUpdateOperationsInput | string | null
    argument2_url?: NullableStringFieldUpdateOperationsInput | string | null
    uuid?: StringFieldUpdateOperationsInput | string
    cases_citations?: cases_citationsUpdateManyWithoutSupreme_court_casesNestedInput
  }

  export type supreme_court_casesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    view_count?: NullableStringFieldUpdateOperationsInput | string | null
    docket_number?: NullableStringFieldUpdateOperationsInput | string | null
    additional_docket_numbers?: NullableStringFieldUpdateOperationsInput | string | null
    manner_of_jurisdiction?: NullableStringFieldUpdateOperationsInput | string | null
    first_party?: NullableStringFieldUpdateOperationsInput | string | null
    second_party?: NullableStringFieldUpdateOperationsInput | string | null
    timeline?: NullableJsonNullValueInput | InputJsonValue
    lower_court?: NullableJsonNullValueInput | InputJsonValue
    facts_of_the_case?: NullableStringFieldUpdateOperationsInput | string | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: NullableStringFieldUpdateOperationsInput | string | null
    advocates?: NullableJsonNullValueInput | InputJsonValue
    oral_argument_audio?: NullableJsonNullValueInput | InputJsonValue
    citation?: NullableJsonNullValueInput | InputJsonValue
    decisions?: NullableJsonNullValueInput | InputJsonValue
    first_party_label?: NullableStringFieldUpdateOperationsInput | string | null
    second_party_label?: NullableStringFieldUpdateOperationsInput | string | null
    heard_by?: NullableJsonNullValueInput | InputJsonValue
    decided_by?: NullableJsonNullValueInput | InputJsonValue
    term?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableJsonNullValueInput | InputJsonValue
    opinion_announcement?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    written_opinion?: NullableStringFieldUpdateOperationsInput | string | null
    related_cases?: NullableStringFieldUpdateOperationsInput | string | null
    justia_url?: NullableStringFieldUpdateOperationsInput | string | null
    argument2_url?: NullableStringFieldUpdateOperationsInput | string | null
    uuid?: StringFieldUpdateOperationsInput | string
    cases_citations?: cases_citationsUncheckedUpdateManyWithoutSupreme_court_casesNestedInput
  }

  export type supreme_court_casesCreateManyInput = {
    id: string
    name?: string | null
    href?: string | null
    view_count?: string | null
    docket_number?: string | null
    additional_docket_numbers?: string | null
    manner_of_jurisdiction?: string | null
    first_party?: string | null
    second_party?: string | null
    timeline?: NullableJsonNullValueInput | InputJsonValue
    lower_court?: NullableJsonNullValueInput | InputJsonValue
    facts_of_the_case?: string | null
    question?: string | null
    conclusion?: string | null
    advocates?: NullableJsonNullValueInput | InputJsonValue
    oral_argument_audio?: NullableJsonNullValueInput | InputJsonValue
    citation?: NullableJsonNullValueInput | InputJsonValue
    decisions?: NullableJsonNullValueInput | InputJsonValue
    first_party_label?: string | null
    second_party_label?: string | null
    heard_by?: NullableJsonNullValueInput | InputJsonValue
    decided_by?: NullableJsonNullValueInput | InputJsonValue
    term?: string | null
    location?: NullableJsonNullValueInput | InputJsonValue
    opinion_announcement?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    written_opinion?: string | null
    related_cases?: string | null
    justia_url?: string | null
    argument2_url?: string | null
    uuid?: string
  }

  export type supreme_court_casesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    view_count?: NullableStringFieldUpdateOperationsInput | string | null
    docket_number?: NullableStringFieldUpdateOperationsInput | string | null
    additional_docket_numbers?: NullableStringFieldUpdateOperationsInput | string | null
    manner_of_jurisdiction?: NullableStringFieldUpdateOperationsInput | string | null
    first_party?: NullableStringFieldUpdateOperationsInput | string | null
    second_party?: NullableStringFieldUpdateOperationsInput | string | null
    timeline?: NullableJsonNullValueInput | InputJsonValue
    lower_court?: NullableJsonNullValueInput | InputJsonValue
    facts_of_the_case?: NullableStringFieldUpdateOperationsInput | string | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: NullableStringFieldUpdateOperationsInput | string | null
    advocates?: NullableJsonNullValueInput | InputJsonValue
    oral_argument_audio?: NullableJsonNullValueInput | InputJsonValue
    citation?: NullableJsonNullValueInput | InputJsonValue
    decisions?: NullableJsonNullValueInput | InputJsonValue
    first_party_label?: NullableStringFieldUpdateOperationsInput | string | null
    second_party_label?: NullableStringFieldUpdateOperationsInput | string | null
    heard_by?: NullableJsonNullValueInput | InputJsonValue
    decided_by?: NullableJsonNullValueInput | InputJsonValue
    term?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableJsonNullValueInput | InputJsonValue
    opinion_announcement?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    written_opinion?: NullableStringFieldUpdateOperationsInput | string | null
    related_cases?: NullableStringFieldUpdateOperationsInput | string | null
    justia_url?: NullableStringFieldUpdateOperationsInput | string | null
    argument2_url?: NullableStringFieldUpdateOperationsInput | string | null
    uuid?: StringFieldUpdateOperationsInput | string
  }

  export type supreme_court_casesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    view_count?: NullableStringFieldUpdateOperationsInput | string | null
    docket_number?: NullableStringFieldUpdateOperationsInput | string | null
    additional_docket_numbers?: NullableStringFieldUpdateOperationsInput | string | null
    manner_of_jurisdiction?: NullableStringFieldUpdateOperationsInput | string | null
    first_party?: NullableStringFieldUpdateOperationsInput | string | null
    second_party?: NullableStringFieldUpdateOperationsInput | string | null
    timeline?: NullableJsonNullValueInput | InputJsonValue
    lower_court?: NullableJsonNullValueInput | InputJsonValue
    facts_of_the_case?: NullableStringFieldUpdateOperationsInput | string | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: NullableStringFieldUpdateOperationsInput | string | null
    advocates?: NullableJsonNullValueInput | InputJsonValue
    oral_argument_audio?: NullableJsonNullValueInput | InputJsonValue
    citation?: NullableJsonNullValueInput | InputJsonValue
    decisions?: NullableJsonNullValueInput | InputJsonValue
    first_party_label?: NullableStringFieldUpdateOperationsInput | string | null
    second_party_label?: NullableStringFieldUpdateOperationsInput | string | null
    heard_by?: NullableJsonNullValueInput | InputJsonValue
    decided_by?: NullableJsonNullValueInput | InputJsonValue
    term?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableJsonNullValueInput | InputJsonValue
    opinion_announcement?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    written_opinion?: NullableStringFieldUpdateOperationsInput | string | null
    related_cases?: NullableStringFieldUpdateOperationsInput | string | null
    justia_url?: NullableStringFieldUpdateOperationsInput | string | null
    argument2_url?: NullableStringFieldUpdateOperationsInput | string | null
    uuid?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type cases_by_yearCountOrderByAggregateInput = {
    oyez_id?: SortOrder
    year?: SortOrder
    docket_number?: SortOrder
    uuid?: SortOrder
  }

  export type cases_by_yearAvgOrderByAggregateInput = {
    year?: SortOrder
  }

  export type cases_by_yearMaxOrderByAggregateInput = {
    oyez_id?: SortOrder
    year?: SortOrder
    docket_number?: SortOrder
    uuid?: SortOrder
  }

  export type cases_by_yearMinOrderByAggregateInput = {
    oyez_id?: SortOrder
    year?: SortOrder
    docket_number?: SortOrder
    uuid?: SortOrder
  }

  export type cases_by_yearSumOrderByAggregateInput = {
    year?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type Supreme_court_casesRelationFilter = {
    is?: supreme_court_casesWhereInput
    isNot?: supreme_court_casesWhereInput
  }

  export type cases_citationsCountOrderByAggregateInput = {
    id?: SortOrder
    case_uuid?: SortOrder
    citation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type cases_citationsMaxOrderByAggregateInput = {
    id?: SortOrder
    case_uuid?: SortOrder
    citation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type cases_citationsMinOrderByAggregateInput = {
    id?: SortOrder
    case_uuid?: SortOrder
    citation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ny_appeals_court_casesCountOrderByAggregateInput = {
    name?: SortOrder
    link?: SortOrder
    citation?: SortOrder
    opinion?: SortOrder
    uuid?: SortOrder
    id?: SortOrder
  }

  export type ny_appeals_court_casesMaxOrderByAggregateInput = {
    name?: SortOrder
    link?: SortOrder
    citation?: SortOrder
    opinion?: SortOrder
    uuid?: SortOrder
    id?: SortOrder
  }

  export type ny_appeals_court_casesMinOrderByAggregateInput = {
    name?: SortOrder
    link?: SortOrder
    citation?: SortOrder
    opinion?: SortOrder
    uuid?: SortOrder
    id?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type Cases_citationsListRelationFilter = {
    every?: cases_citationsWhereInput
    some?: cases_citationsWhereInput
    none?: cases_citationsWhereInput
  }

  export type cases_citationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type supreme_court_casesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    href?: SortOrder
    view_count?: SortOrder
    docket_number?: SortOrder
    additional_docket_numbers?: SortOrder
    manner_of_jurisdiction?: SortOrder
    first_party?: SortOrder
    second_party?: SortOrder
    timeline?: SortOrder
    lower_court?: SortOrder
    facts_of_the_case?: SortOrder
    question?: SortOrder
    conclusion?: SortOrder
    advocates?: SortOrder
    oral_argument_audio?: SortOrder
    citation?: SortOrder
    decisions?: SortOrder
    first_party_label?: SortOrder
    second_party_label?: SortOrder
    heard_by?: SortOrder
    decided_by?: SortOrder
    term?: SortOrder
    location?: SortOrder
    opinion_announcement?: SortOrder
    description?: SortOrder
    written_opinion?: SortOrder
    related_cases?: SortOrder
    justia_url?: SortOrder
    argument2_url?: SortOrder
    uuid?: SortOrder
  }

  export type supreme_court_casesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    href?: SortOrder
    view_count?: SortOrder
    docket_number?: SortOrder
    additional_docket_numbers?: SortOrder
    manner_of_jurisdiction?: SortOrder
    first_party?: SortOrder
    second_party?: SortOrder
    facts_of_the_case?: SortOrder
    question?: SortOrder
    conclusion?: SortOrder
    first_party_label?: SortOrder
    second_party_label?: SortOrder
    term?: SortOrder
    description?: SortOrder
    written_opinion?: SortOrder
    related_cases?: SortOrder
    justia_url?: SortOrder
    argument2_url?: SortOrder
    uuid?: SortOrder
  }

  export type supreme_court_casesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    href?: SortOrder
    view_count?: SortOrder
    docket_number?: SortOrder
    additional_docket_numbers?: SortOrder
    manner_of_jurisdiction?: SortOrder
    first_party?: SortOrder
    second_party?: SortOrder
    facts_of_the_case?: SortOrder
    question?: SortOrder
    conclusion?: SortOrder
    first_party_label?: SortOrder
    second_party_label?: SortOrder
    term?: SortOrder
    description?: SortOrder
    written_opinion?: SortOrder
    related_cases?: SortOrder
    justia_url?: SortOrder
    argument2_url?: SortOrder
    uuid?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type supreme_court_casesCreateNestedOneWithoutCases_citationsInput = {
    create?: XOR<supreme_court_casesCreateWithoutCases_citationsInput, supreme_court_casesUncheckedCreateWithoutCases_citationsInput>
    connectOrCreate?: supreme_court_casesCreateOrConnectWithoutCases_citationsInput
    connect?: supreme_court_casesWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type supreme_court_casesUpdateOneRequiredWithoutCases_citationsNestedInput = {
    create?: XOR<supreme_court_casesCreateWithoutCases_citationsInput, supreme_court_casesUncheckedCreateWithoutCases_citationsInput>
    connectOrCreate?: supreme_court_casesCreateOrConnectWithoutCases_citationsInput
    upsert?: supreme_court_casesUpsertWithoutCases_citationsInput
    connect?: supreme_court_casesWhereUniqueInput
    update?: XOR<XOR<supreme_court_casesUpdateToOneWithWhereWithoutCases_citationsInput, supreme_court_casesUpdateWithoutCases_citationsInput>, supreme_court_casesUncheckedUpdateWithoutCases_citationsInput>
  }

  export type cases_citationsCreateNestedManyWithoutSupreme_court_casesInput = {
    create?: XOR<cases_citationsCreateWithoutSupreme_court_casesInput, cases_citationsUncheckedCreateWithoutSupreme_court_casesInput> | cases_citationsCreateWithoutSupreme_court_casesInput[] | cases_citationsUncheckedCreateWithoutSupreme_court_casesInput[]
    connectOrCreate?: cases_citationsCreateOrConnectWithoutSupreme_court_casesInput | cases_citationsCreateOrConnectWithoutSupreme_court_casesInput[]
    createMany?: cases_citationsCreateManySupreme_court_casesInputEnvelope
    connect?: cases_citationsWhereUniqueInput | cases_citationsWhereUniqueInput[]
  }

  export type cases_citationsUncheckedCreateNestedManyWithoutSupreme_court_casesInput = {
    create?: XOR<cases_citationsCreateWithoutSupreme_court_casesInput, cases_citationsUncheckedCreateWithoutSupreme_court_casesInput> | cases_citationsCreateWithoutSupreme_court_casesInput[] | cases_citationsUncheckedCreateWithoutSupreme_court_casesInput[]
    connectOrCreate?: cases_citationsCreateOrConnectWithoutSupreme_court_casesInput | cases_citationsCreateOrConnectWithoutSupreme_court_casesInput[]
    createMany?: cases_citationsCreateManySupreme_court_casesInputEnvelope
    connect?: cases_citationsWhereUniqueInput | cases_citationsWhereUniqueInput[]
  }

  export type cases_citationsUpdateManyWithoutSupreme_court_casesNestedInput = {
    create?: XOR<cases_citationsCreateWithoutSupreme_court_casesInput, cases_citationsUncheckedCreateWithoutSupreme_court_casesInput> | cases_citationsCreateWithoutSupreme_court_casesInput[] | cases_citationsUncheckedCreateWithoutSupreme_court_casesInput[]
    connectOrCreate?: cases_citationsCreateOrConnectWithoutSupreme_court_casesInput | cases_citationsCreateOrConnectWithoutSupreme_court_casesInput[]
    upsert?: cases_citationsUpsertWithWhereUniqueWithoutSupreme_court_casesInput | cases_citationsUpsertWithWhereUniqueWithoutSupreme_court_casesInput[]
    createMany?: cases_citationsCreateManySupreme_court_casesInputEnvelope
    set?: cases_citationsWhereUniqueInput | cases_citationsWhereUniqueInput[]
    disconnect?: cases_citationsWhereUniqueInput | cases_citationsWhereUniqueInput[]
    delete?: cases_citationsWhereUniqueInput | cases_citationsWhereUniqueInput[]
    connect?: cases_citationsWhereUniqueInput | cases_citationsWhereUniqueInput[]
    update?: cases_citationsUpdateWithWhereUniqueWithoutSupreme_court_casesInput | cases_citationsUpdateWithWhereUniqueWithoutSupreme_court_casesInput[]
    updateMany?: cases_citationsUpdateManyWithWhereWithoutSupreme_court_casesInput | cases_citationsUpdateManyWithWhereWithoutSupreme_court_casesInput[]
    deleteMany?: cases_citationsScalarWhereInput | cases_citationsScalarWhereInput[]
  }

  export type cases_citationsUncheckedUpdateManyWithoutSupreme_court_casesNestedInput = {
    create?: XOR<cases_citationsCreateWithoutSupreme_court_casesInput, cases_citationsUncheckedCreateWithoutSupreme_court_casesInput> | cases_citationsCreateWithoutSupreme_court_casesInput[] | cases_citationsUncheckedCreateWithoutSupreme_court_casesInput[]
    connectOrCreate?: cases_citationsCreateOrConnectWithoutSupreme_court_casesInput | cases_citationsCreateOrConnectWithoutSupreme_court_casesInput[]
    upsert?: cases_citationsUpsertWithWhereUniqueWithoutSupreme_court_casesInput | cases_citationsUpsertWithWhereUniqueWithoutSupreme_court_casesInput[]
    createMany?: cases_citationsCreateManySupreme_court_casesInputEnvelope
    set?: cases_citationsWhereUniqueInput | cases_citationsWhereUniqueInput[]
    disconnect?: cases_citationsWhereUniqueInput | cases_citationsWhereUniqueInput[]
    delete?: cases_citationsWhereUniqueInput | cases_citationsWhereUniqueInput[]
    connect?: cases_citationsWhereUniqueInput | cases_citationsWhereUniqueInput[]
    update?: cases_citationsUpdateWithWhereUniqueWithoutSupreme_court_casesInput | cases_citationsUpdateWithWhereUniqueWithoutSupreme_court_casesInput[]
    updateMany?: cases_citationsUpdateManyWithWhereWithoutSupreme_court_casesInput | cases_citationsUpdateManyWithWhereWithoutSupreme_court_casesInput[]
    deleteMany?: cases_citationsScalarWhereInput | cases_citationsScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type supreme_court_casesCreateWithoutCases_citationsInput = {
    id: string
    name?: string | null
    href?: string | null
    view_count?: string | null
    docket_number?: string | null
    additional_docket_numbers?: string | null
    manner_of_jurisdiction?: string | null
    first_party?: string | null
    second_party?: string | null
    timeline?: NullableJsonNullValueInput | InputJsonValue
    lower_court?: NullableJsonNullValueInput | InputJsonValue
    facts_of_the_case?: string | null
    question?: string | null
    conclusion?: string | null
    advocates?: NullableJsonNullValueInput | InputJsonValue
    oral_argument_audio?: NullableJsonNullValueInput | InputJsonValue
    citation?: NullableJsonNullValueInput | InputJsonValue
    decisions?: NullableJsonNullValueInput | InputJsonValue
    first_party_label?: string | null
    second_party_label?: string | null
    heard_by?: NullableJsonNullValueInput | InputJsonValue
    decided_by?: NullableJsonNullValueInput | InputJsonValue
    term?: string | null
    location?: NullableJsonNullValueInput | InputJsonValue
    opinion_announcement?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    written_opinion?: string | null
    related_cases?: string | null
    justia_url?: string | null
    argument2_url?: string | null
    uuid?: string
  }

  export type supreme_court_casesUncheckedCreateWithoutCases_citationsInput = {
    id: string
    name?: string | null
    href?: string | null
    view_count?: string | null
    docket_number?: string | null
    additional_docket_numbers?: string | null
    manner_of_jurisdiction?: string | null
    first_party?: string | null
    second_party?: string | null
    timeline?: NullableJsonNullValueInput | InputJsonValue
    lower_court?: NullableJsonNullValueInput | InputJsonValue
    facts_of_the_case?: string | null
    question?: string | null
    conclusion?: string | null
    advocates?: NullableJsonNullValueInput | InputJsonValue
    oral_argument_audio?: NullableJsonNullValueInput | InputJsonValue
    citation?: NullableJsonNullValueInput | InputJsonValue
    decisions?: NullableJsonNullValueInput | InputJsonValue
    first_party_label?: string | null
    second_party_label?: string | null
    heard_by?: NullableJsonNullValueInput | InputJsonValue
    decided_by?: NullableJsonNullValueInput | InputJsonValue
    term?: string | null
    location?: NullableJsonNullValueInput | InputJsonValue
    opinion_announcement?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    written_opinion?: string | null
    related_cases?: string | null
    justia_url?: string | null
    argument2_url?: string | null
    uuid?: string
  }

  export type supreme_court_casesCreateOrConnectWithoutCases_citationsInput = {
    where: supreme_court_casesWhereUniqueInput
    create: XOR<supreme_court_casesCreateWithoutCases_citationsInput, supreme_court_casesUncheckedCreateWithoutCases_citationsInput>
  }

  export type supreme_court_casesUpsertWithoutCases_citationsInput = {
    update: XOR<supreme_court_casesUpdateWithoutCases_citationsInput, supreme_court_casesUncheckedUpdateWithoutCases_citationsInput>
    create: XOR<supreme_court_casesCreateWithoutCases_citationsInput, supreme_court_casesUncheckedCreateWithoutCases_citationsInput>
    where?: supreme_court_casesWhereInput
  }

  export type supreme_court_casesUpdateToOneWithWhereWithoutCases_citationsInput = {
    where?: supreme_court_casesWhereInput
    data: XOR<supreme_court_casesUpdateWithoutCases_citationsInput, supreme_court_casesUncheckedUpdateWithoutCases_citationsInput>
  }

  export type supreme_court_casesUpdateWithoutCases_citationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    view_count?: NullableStringFieldUpdateOperationsInput | string | null
    docket_number?: NullableStringFieldUpdateOperationsInput | string | null
    additional_docket_numbers?: NullableStringFieldUpdateOperationsInput | string | null
    manner_of_jurisdiction?: NullableStringFieldUpdateOperationsInput | string | null
    first_party?: NullableStringFieldUpdateOperationsInput | string | null
    second_party?: NullableStringFieldUpdateOperationsInput | string | null
    timeline?: NullableJsonNullValueInput | InputJsonValue
    lower_court?: NullableJsonNullValueInput | InputJsonValue
    facts_of_the_case?: NullableStringFieldUpdateOperationsInput | string | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: NullableStringFieldUpdateOperationsInput | string | null
    advocates?: NullableJsonNullValueInput | InputJsonValue
    oral_argument_audio?: NullableJsonNullValueInput | InputJsonValue
    citation?: NullableJsonNullValueInput | InputJsonValue
    decisions?: NullableJsonNullValueInput | InputJsonValue
    first_party_label?: NullableStringFieldUpdateOperationsInput | string | null
    second_party_label?: NullableStringFieldUpdateOperationsInput | string | null
    heard_by?: NullableJsonNullValueInput | InputJsonValue
    decided_by?: NullableJsonNullValueInput | InputJsonValue
    term?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableJsonNullValueInput | InputJsonValue
    opinion_announcement?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    written_opinion?: NullableStringFieldUpdateOperationsInput | string | null
    related_cases?: NullableStringFieldUpdateOperationsInput | string | null
    justia_url?: NullableStringFieldUpdateOperationsInput | string | null
    argument2_url?: NullableStringFieldUpdateOperationsInput | string | null
    uuid?: StringFieldUpdateOperationsInput | string
  }

  export type supreme_court_casesUncheckedUpdateWithoutCases_citationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    view_count?: NullableStringFieldUpdateOperationsInput | string | null
    docket_number?: NullableStringFieldUpdateOperationsInput | string | null
    additional_docket_numbers?: NullableStringFieldUpdateOperationsInput | string | null
    manner_of_jurisdiction?: NullableStringFieldUpdateOperationsInput | string | null
    first_party?: NullableStringFieldUpdateOperationsInput | string | null
    second_party?: NullableStringFieldUpdateOperationsInput | string | null
    timeline?: NullableJsonNullValueInput | InputJsonValue
    lower_court?: NullableJsonNullValueInput | InputJsonValue
    facts_of_the_case?: NullableStringFieldUpdateOperationsInput | string | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: NullableStringFieldUpdateOperationsInput | string | null
    advocates?: NullableJsonNullValueInput | InputJsonValue
    oral_argument_audio?: NullableJsonNullValueInput | InputJsonValue
    citation?: NullableJsonNullValueInput | InputJsonValue
    decisions?: NullableJsonNullValueInput | InputJsonValue
    first_party_label?: NullableStringFieldUpdateOperationsInput | string | null
    second_party_label?: NullableStringFieldUpdateOperationsInput | string | null
    heard_by?: NullableJsonNullValueInput | InputJsonValue
    decided_by?: NullableJsonNullValueInput | InputJsonValue
    term?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableJsonNullValueInput | InputJsonValue
    opinion_announcement?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    written_opinion?: NullableStringFieldUpdateOperationsInput | string | null
    related_cases?: NullableStringFieldUpdateOperationsInput | string | null
    justia_url?: NullableStringFieldUpdateOperationsInput | string | null
    argument2_url?: NullableStringFieldUpdateOperationsInput | string | null
    uuid?: StringFieldUpdateOperationsInput | string
  }

  export type cases_citationsCreateWithoutSupreme_court_casesInput = {
    id?: string
    citation?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type cases_citationsUncheckedCreateWithoutSupreme_court_casesInput = {
    id?: string
    citation?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type cases_citationsCreateOrConnectWithoutSupreme_court_casesInput = {
    where: cases_citationsWhereUniqueInput
    create: XOR<cases_citationsCreateWithoutSupreme_court_casesInput, cases_citationsUncheckedCreateWithoutSupreme_court_casesInput>
  }

  export type cases_citationsCreateManySupreme_court_casesInputEnvelope = {
    data: cases_citationsCreateManySupreme_court_casesInput | cases_citationsCreateManySupreme_court_casesInput[]
    skipDuplicates?: boolean
  }

  export type cases_citationsUpsertWithWhereUniqueWithoutSupreme_court_casesInput = {
    where: cases_citationsWhereUniqueInput
    update: XOR<cases_citationsUpdateWithoutSupreme_court_casesInput, cases_citationsUncheckedUpdateWithoutSupreme_court_casesInput>
    create: XOR<cases_citationsCreateWithoutSupreme_court_casesInput, cases_citationsUncheckedCreateWithoutSupreme_court_casesInput>
  }

  export type cases_citationsUpdateWithWhereUniqueWithoutSupreme_court_casesInput = {
    where: cases_citationsWhereUniqueInput
    data: XOR<cases_citationsUpdateWithoutSupreme_court_casesInput, cases_citationsUncheckedUpdateWithoutSupreme_court_casesInput>
  }

  export type cases_citationsUpdateManyWithWhereWithoutSupreme_court_casesInput = {
    where: cases_citationsScalarWhereInput
    data: XOR<cases_citationsUpdateManyMutationInput, cases_citationsUncheckedUpdateManyWithoutSupreme_court_casesInput>
  }

  export type cases_citationsScalarWhereInput = {
    AND?: cases_citationsScalarWhereInput | cases_citationsScalarWhereInput[]
    OR?: cases_citationsScalarWhereInput[]
    NOT?: cases_citationsScalarWhereInput | cases_citationsScalarWhereInput[]
    id?: UuidFilter<"cases_citations"> | string
    case_uuid?: UuidFilter<"cases_citations"> | string
    citation?: StringNullableFilter<"cases_citations"> | string | null
    created_at?: DateTimeNullableFilter<"cases_citations"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"cases_citations"> | Date | string | null
  }

  export type cases_citationsCreateManySupreme_court_casesInput = {
    id?: string
    citation?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type cases_citationsUpdateWithoutSupreme_court_casesInput = {
    id?: StringFieldUpdateOperationsInput | string
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type cases_citationsUncheckedUpdateWithoutSupreme_court_casesInput = {
    id?: StringFieldUpdateOperationsInput | string
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type cases_citationsUncheckedUpdateManyWithoutSupreme_court_casesInput = {
    id?: StringFieldUpdateOperationsInput | string
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use Supreme_court_casesCountOutputTypeDefaultArgs instead
     */
    export type Supreme_court_casesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Supreme_court_casesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use cases_by_yearDefaultArgs instead
     */
    export type cases_by_yearArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cases_by_yearDefaultArgs<ExtArgs>
    /**
     * @deprecated Use cases_citationsDefaultArgs instead
     */
    export type cases_citationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cases_citationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ny_appeals_court_casesDefaultArgs instead
     */
    export type ny_appeals_court_casesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ny_appeals_court_casesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use supreme_court_casesDefaultArgs instead
     */
    export type supreme_court_casesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = supreme_court_casesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}